# -*- conf-toml -*-
## Process this file with automake to produce Makefile.in -*-Makefile-*-

## SPDX-FileCopyrightText: <text> © 2020 Alan D. Salewski <ads@salewski.email> </text>
## SPDX-License-Identifier: GPL-2.0-or-later

# See: https://doc.rust-lang.org/cargo/reference/config.html

# This file holds the '.cargo/config.toml' file common to all Cargo "packages"
# within the 'ads-github-tools' project. Package-specific '.cargo/config.toml'
# file settings can override anything set here. This file should only include
# those settings that truly are common across all of the Cargo packages in the
# tree.

# paths = ["/path/to/override"] # path dependency overrides

# [alias]     # command aliases
# b = "build"
# c = "check"
# t = "test"
# r = "run"
# rr = "run --release"
# space_example = ["run", "--release", "--", "\"command list\""]

# [build]
# jobs = 1                  # number of parallel jobs, defaults to # of CPUs
# rustc = "rustc"           # the rust compiler tool
# rustc-wrapper = "…"       # run this wrapper instead of `rustc`
# rustdoc = "rustdoc"       # the doc generator tool
# target = "triple"         # build for the target triple (ignored by `cargo install`)
# target-dir = "target"     # path of where to place all generated artifacts
# rustflags = ["…", "…"]    # custom flags to pass to all compiler invocations
# rustdocflags = ["…", "…"] # custom flags to pass to rustdoc
# incremental = true        # whether or not to enable incremental compilation
# dep-info-basedir = "…"    # path for the base directory for targets in depfiles
# pipelining = true         # rustc pipelining

# [cargo-new]
# name = "Your Name"        # name to use in `authors` field
# email = "you@example.com" # email address to use in `authors` field
# vcs = "none"              # VCS to use ('git', 'hg', 'pijul', 'fossil', 'none')

[http]
# debug = false               # HTTP debugging
# proxy = "host:port"         # HTTP proxy in libcurl format
# ssl-version = "tlsv1.3"     # TLS version to use
# ssl-version.max = "tlsv1.3" # maximum TLS version
ssl-version.min = "tlsv1.2"   # minimum TLS version
# timeout = 30                # timeout for each HTTP request, in seconds
# low-speed-limit = 10        # network timeout threshold (bytes/sec)
# cainfo = "cert.pem"         # path to Certificate Authority (CA) bundle
# check-revoke = true         # check for SSL certificate revocation
# multiplexing = true         # HTTP/2 multiplexing
# user-agent = "…"            # the user-agent header

# [install]
# root = "/some/path"         # `cargo install` destination directory

# [net]
# retry = 2                   # network retries
# git-fetch-with-cli = true   # use the `git` executable for git operations
# offline = false             # do not access the network

# [profile.<name>]         # Modify profile settings via config.
# opt-level = 0            # Optimization level.
# debug = true             # Include debug info.
# debug-assertions = true  # Enables debug assertions.
# overflow-checks = true   # Enables runtime integer overflow checks.
# lto = false              # Sets link-time optimization.
# panic = 'unwind'         # The panic strategy.
# incremental = true       # Incremental compilation.
# codegen-units = 16       # Number of code generation units.
# rpath = false            # Sets the rpath linking option.
# [profile.<name>.build-override]  # Overrides build-script settings.
# # Same keys for a normal profile.
# [profile.<name>.package.<name>]  # Override profile for a package.
# # Same keys for a normal profile (minus `panic`, `lto`, and `rpath`).

[profile.release]
# Include debugging symbols in our executable(s) even when producing "release"
# builds.
debug = true


# [registries.<name>]  # registries other than crates.io
# index = "…"          # URL of the registry index
# token = "…"          # authentication token for the registry

# [registry]
# default = "…"        # name of the default registry
# token = "…"          # authentication token for crates.io

# [source.<name>]      # source definition and replacement
# replace-with = "…"   # replace this source with the given named source
# directory = "…"      # path to a directory source
# registry = "…"       # URL to a registry source
# local-registry = "…" # path to a local registry source
# git = "…"            # URL of a git repository source
# branch = "…"         # branch name for the git repository
# tag = "…"            # tag name for the git repository
# rev = "…"            # revision for the git repository

[source.crates-io]
replace-with = "vendored-sources"

[source.vendored-sources]

# CAREFUL: Our relative path to the vendored sources directory will be
#          interpreted relative to the /parent/ directory of this
#          'config.toml' file, not relative to the file itself. Yes, that is
#          wonky as all hell, and the reason we use an absolute path to the
#          location.
#
#          <quote src="https://doc.rust-lang.org/cargo/reference/config.html">
#              Config-relative paths
#
#              Paths in config files may be absolute, relative, or a bare name without any
#              path separators.
#              ...
#              Paths for non-executables will be relative to where the config value is
#              defined. For config files, that is relative to the parent directory of
#              the .cargo directory where the value was defined.
#          </quote>
#
#          You might think you can get away with using 'top_srcdir', but that
#          won't work. You'll get different results (working and non-working)
#          depending on whether or not you are performing a VPATH
#          build. Likewise for 'srcdir/..'
#
# Maintenance note:
# -----------------
# Note that our top-level Makefile.am file provides a 'cargo-vendor-update'
# target that the developer can use to add to or update the "vendored" sources
# stored beneath this location. It knows about all of the Cargo "packages" in
# our source tree.
#
directory = "@abs_top_srcdir@/src/third-party/cargo-vendored"


# [target.<triple>]
# linker = "…"            # linker to use
# runner = "…"            # wrapper to run executables
# rustflags = ["…", "…"]  # custom flags for `rustc`

# [target.<cfg>]
# runner = "…"            # wrapper to run executables
# rustflags = ["…", "…"]  # custom flags for `rustc`

# [target.<triple>.<links>] # `links` build script override
# rustc-link-lib = ["foo"]
# rustc-link-search = ["/path/to/foo"]
# rustc-flags = ["-L", "/some/path"]
# rustc-cfg = ['key="value"']
# rustc-env = {key = "value"}
# rustc-cdylib-link-arg = ["…"]
# metadata_key1 = "value"
# metadata_key2 = "value"

# [term]
# verbose = false        # whether cargo provides verbose output
# color = 'auto'         # whether cargo colorizes output
