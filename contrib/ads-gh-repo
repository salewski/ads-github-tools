#!/bin/bash -
# SPDX-FileCopyrightText: <text> Â© 2020 Alan D. Salewski <ads@salewski.email> </text>
#
# SPDX-License-Identifier: GPL-2.0-or-later

# ads-gh-repo: sketch of what a "create new repo in GitHup with an arbitrary
# branch name" feature might work.
#
# The initial use case would be to support that specific use case (optionally
# honoring the user's 'init.defaultBranch' setting (git >= 2.28 only).
#
# A longer-term approach might be to support the entire GitHub "Repositories"
# API, but whether or not that is worth the effort remains to be seen.
#
#     https://developer.github.com/v3/repos/#create-a-repository-for-the-authenticated-user
#     https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#create-a-repository-for-the-authenticated-user
#
declare -r PROG='ads-gh-repo'

declare -r GITHUB_REPO_OWNER='salewski'
declare -r MY_DEFAULT_BRANCH_NAME='whatever'

declare -r NEW_REPO_NAME='aljunk-testing-repo-001'

#BE_VERBOSE=false
BE_VERBOSE=true

#DEBUGGING=false
DEBUGGING=true

#DO_FORCE_REPLACE=false
DO_FORCE_REPLACE=true

DO_EMIT_NEW_REPO_JSON=false
#DO_EMIT_NEW_REPO_JSON=true

MY_TMP_DIR=$(mktemp -t --directory "${PROG}.XXXXXXXX")
if test $? -ne 0; then
    printf "${PROG} (error) was unable to create temporary directory; bailing out\n" 1>&2
    exit 1
fi
#
# This should be a "can't happen" scenario, but since we do a 'rm -fr ...' on
# the value when we are done, we want to be belt-and-suspenders about it...
#
if test -z "${MY_TMP_DIR}"; then
    printf "${PROG} (error) temporary directory path is empty; bailing out\n" 1>&2
    exit 1
fi

declare -r MY_TMP_CURL_OUT_FPATH="${MY_TMP_DIR}/curl.out"
declare -r MY_TMP_GIT_REPO_FPATH="${MY_TMP_DIR}/repo.git"


declare -r gl_const_http_accept_github_version='Accept: application/vnd.github.v3+json'

# CAREFUL: Interpolating heredoc
#
# Note that we have 'auto_init' set to true to cause an initial commit to be
# made with an empty README.md file. We need to have at least one commit to
# reify the default branch; otherwise we will not be able to rename it below
# (git only makes the branch real upon the first commit).
#
# This requires 'nebula-preview' header, and then overrides 'private' param
# (if both are provided).
#
#    "visibility":     "private",
#
#    Access: application/vnd.github.nebula-preview+json
#
json_create=$(cat - <<EOF
{
    "auto_init":      "true",
    "name":           "${NEW_REPO_NAME}",
    "private":        "true",
    "default_branch": "${MY_DEFAULT_BRANCH_NAME}",

    "description":    "just trying something"
}
EOF
)

# XXX: At the time of writing (2020-10-04), the 'default_branch' param in the
#      above is ignored by the GitHub API at the time of repo creation, even
#      though a 'default_branch' key is returned in the response. The value of
#      the key in the response does not reflect the value we provided, so the
#      code below jumps through hoops to rename the branch locally, and then
#      synchronize the remote repo with the same changes.


# Common global options for use in every 'curl' invocation. Specific
# invocations will require additional options, but such usages should not
# modify this array.
#
declare -a MY_CURL_DEFAULT_OPTS=()
declare -a MY_CURL_OPTS=()

# This disables output of curl's progress meter /and/ output of error messages...
MY_CURL_DEFAULT_OPTS+=( '--silent' )
# ...but this re-enables output of the error messages.
MY_CURL_DEFAULT_OPTS+=( '--show-error' )


# Force use of TLS 1.2 (or later). Writing in 2016, all previous versions are
# known to be broken and susceptible to known attacks. Note that the
# '--tlsv1.2' option was added in curl 7.34.0
#
# This is absolutely essential since we're using HTTP Basic Auth (see below).
#
MY_CURL_DEFAULT_OPTS+=( '--tlsv1.2' )

# Allow ONLY https, for both the initial request and for redirects
MY_CURL_DEFAULT_OPTS+=( '--proto')
MY_CURL_DEFAULT_OPTS+=( 'https')
MY_CURL_DEFAULT_OPTS+=( '--proto-redir')
MY_CURL_DEFAULT_OPTS+=( 'https')


# Tell curl to use HTTP Basic Authentication. This is the curl default, but
# we're explicit about what we expect (and want to avoid any surprises from
# weirdo ~/.curlrc files).
#
# See also: RFC 7617 "The 'Basic' HTTP Authentication Scheme" (2015-09)
#
MY_CURL_DEFAULT_OPTS+=( '--basic' )


# User's authentication credentials will be obtained from the user's ~/.netrc
# file. See curl(1) and netrc(5)
#
MY_CURL_DEFAULT_OPTS+=( '--netrc'  )

MY_CURL_DEFAULT_OPTS+=( '--user-agent' )
MY_CURL_DEFAULT_OPTS+=( "$PROG"        )


# Even when we're just making HEAD requests, have curl fail
# MY_CURL_DEFAULT_OPTS+=( '--fail' )


# Tell the GitHub service that we're trying to speak v3 of the API. Writing in
# 2016, v3 is the default, but some newer version may become the default in
# the future.
#
MY_CURL_DEFAULT_OPTS+=( '--header' )
MY_CURL_DEFAULT_OPTS+=( "${gl_const_http_accept_github_version}" )

# We always write the (JSON) output to a file in our temporary directory...
#
MY_CURL_DEFAULT_OPTS+=( '--output' )
MY_CURL_DEFAULT_OPTS+=( "${MY_TMP_CURL_OUT_FPATH}" )

# ...and write the HTTP response status to stdout. This allows for robust
# error handling. Also, we cannot really know how to interpret the output
# returned from the remote server until we have examined (at least) the HTTP
# response code.
#
MY_CURL_DEFAULT_OPTS+=( '--write-out'  )
MY_CURL_DEFAULT_OPTS+=( '%{http_code}' )


MY_CURL_OPTS=()  # (re)set
MY_CURL_OPTS+=( "${MY_CURL_DEFAULT_OPTS[@]}" )  # copy

MY_CURL_OPTS+=( '--get' )

# First check to see if the repo already exists. API responds with HTTP 200 on
# success (meaning repo was found to exist). The output (in our temporary
# 'curl.out' file) will be GitHub's JSON representation of the repository.
#
# FIXME: GITHUB_REPO_OWNER and NEW_REPO_NAME both need to be URL-encoded here
#
t_http_code=$(curl "${MY_CURL_OPTS[@]}" \
                   "https://api.github.com/repos/${GITHUB_REPO_OWNER}/${NEW_REPO_NAME}" )
t_estat=$?
# set +x

if test $t_estat -ne 0; then
    printf "${PROG} (error): was error while invoking curl(1) to retrieve existing repo; bailing out\n" 1>&2
    exit 1
fi
if test -z "${t_http_code}"; then
    printf "${PROG} (error): curl(1) command succeeded, but no HTTP response code emitted; bailing out\n" 1>&2
    exit 1
fi

REPO_EXISTS=
NEED_TO_DELETE_EXISTING=false
case ${t_http_code} in

    '200')
        REPO_EXISTS=true

        if $DO_FORCE_REPLACE; then
            NEED_TO_DELETE_EXISTING=true
        else
            printf "${PROG} (error): GitHub repository already exists: %s/%s\n" \
                   "${GITHUB_REPO_OWNER}" \
                   "${NEW_REPO_NAME}" 1>&2
            exit 1
        fi

        # printf "${PROG} (error): \"force replace\" feature not yet implemented, and GitHub repository already exists: %s/%s\n" \
        #        "${GITHUB_REPO_OWNER}" \
        #        "${NEW_REPO_NAME}" 1>&2
        # exit 1
        ;;

    '404')
        REPO_EXISTS=false
        # Keep going...
        ;;

    *)
        printf "${PROG} (error): HTTP response code was: \"%s\"; expected 200 (\"OK\"); bailing out\n" \
               "${t_http_code}" 1>&2
        exit 1
        ;;
esac

if ! ${REPO_EXISTS}; then

    if $BE_VERBOSE; then

        if ${DO_FORCE_REPLACE}; then
            # User explicitly requested that an existing repo be deleted, but
            # no existing repo was found. We'll emit a slightly different
            # message customized to this circumstance.
            #
            printf "${PROG} (info): deletion of existing GitHup repo requested, but repo does not exist: %s/%s\n" \
                   "${GITHUB_REPO_OWNER}" \
                   "${NEW_REPO_NAME}" 1>&2
        else
            printf "${PROG} (info): GitHub repository does not yet exist: %s/%s\n" \
                   "${GITHUB_REPO_OWNER}" \
                   "${NEW_REPO_NAME}" 1>&2
        fi
    fi
else
    # Repo exists, and the user wants us to delete it

    # Internal sanity checks
    if ${DO_FORCE_REPLACE}; then :; else
        printf "${PROG} (BUG): [line: ${LINENO}] DO_FORCE_REPLACE should be set here; bailing out\n" 1>&2
        exit 1
    fi
    if ${NEED_TO_DELETE_EXISTING}; then :; else
        printf "${PROG} (BUG): [line: ${LINENO}] NEED_TO_DELETE_EXISTING should be set here; bailing out\n" 1>&2
        exit 1
    fi

    if $BE_VERBOSE; then
        printf "${PROG} (info): as requested, will delete existing GitHup repo: %s/%s\n" \
               "${GITHUB_REPO_OWNER}" \
               "${NEW_REPO_NAME}" 1>&2
    fi

    MY_CURL_OPTS=()  # (re)set
    MY_CURL_OPTS+=( "${MY_CURL_DEFAULT_OPTS[@]}" )  # copy

    MY_CURL_OPTS+=( '--request' )  # -X
    MY_CURL_OPTS+=( 'DELETE' )

    # DELETE /repos/:owner/:repo
    #
    # Upon success, we will expect an HTTP 204 ("No Content") reponse.
    #
    # Possible expected errors include:
    #
    #
    #     404 ("Not Found") - If the repo does not exist. Though we checked
    #                         for the existence of the repo above, it would
    #                         still be possible for some other process to have
    #                         come along and deleted the repo since we
    #                         checked.
    #
    #     403 ("Forbidden") - If an organization owner has configured the
    #                         organization to prevent members from deleting
    #                         organization owned repos
    #
    # https://developer.github.com/v3/repos/#delete-a-repository
    # https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#delete-a-repository

    # FIXME: GITHUB_REPO_OWNER and NEW_REPO_NAME both need to be URL-encoded here
    #
    t_http_code=$(curl "${MY_CURL_OPTS[@]}" \
                       "https://api.github.com/repos/${GITHUB_REPO_OWNER}/${NEW_REPO_NAME}" )
    t_estat=$?

    if test $t_estat -ne 0; then
        printf "${PROG} (error): was error while invoking curl(1) to DELETE existing repo; bailing out\n" 1>&2
        exit 1
    fi
    if test -z "${t_http_code}"; then
        printf "${PROG} (error): curl(1) DELETE command succeeded, but no HTTP response code emitted; bailing out\n" 1>&2
        exit 1
    fi

    case ${t_http_code} in

        '204')
            if $BE_VERBOSE; then
                printf "${PROG} (info): successfully deleted existing GitHup repo: %s/%s\n" \
                       "${GITHUB_REPO_OWNER}" \
                       "${NEW_REPO_NAME}" 1>&2
            fi
            ;;

        '403')
            printf "${PROG} (error): curl(1) DELETE resulted in a 403 (\"Forbidden\"); was unable to delete repo: %s/%s; bailing out\n" \
                   "${GITHUB_REPO_OWNER}" \
                   "${NEW_REPO_NAME}" 1>&2
            exit 1
            ;;

        '404')
            # This should only happen if some other process is attempting to
            # delete the repo at the same time we are, and that other process
            # beat us to it. Highly unlikely, except in contrived situations.
            #
            printf "${PROG} (warning): curl(1) DELETE resulted in a 404 (\"Not Found\"); existing GitHup repo deleted by some other means (not us): %s/%s\n" \
                   "${GITHUB_REPO_OWNER}" \
                   "${NEW_REPO_NAME}" 1>&2
            # keep going...
            ;;

        *)
          printf "${PROG} (error): HTTP response code for DELETE command was: \"%s\"; expected 204 (\"No Content\"); bailing out\n" \
                 "${t_http_code}" 1>&2
          exit 1
          ;;
    esac
fi

MY_CURL_OPTS=()  # (re)set
MY_CURL_OPTS+=( "${MY_CURL_DEFAULT_OPTS[@]}" )  # copy

# Recall that the '--data' option implies an HTTP POST request.
#
MY_CURL_OPTS+=( '--data' )
MY_CURL_OPTS+=( "${json_create}" )

if $BE_VERBOSE; then
    printf "${PROG} (info): attempting to create new GitHup repo: %s/%s\n" \
           "${GITHUB_REPO_OWNER}" \
           "${NEW_REPO_NAME}" 1>&2
fi

# Create a new repository for the authenticated user. Note that that the
# literal string token 'user' in 'user/repos' is correct (it IS NOT supposed
# to be the name of the authenticated user; that is implied by the
# credentials)
#
#set -x

# We are expecting an HTTP 201 if the new repository was successfully
# created. We'll treat any other response code as an error.
#
# If the repository already exists (and possibly other scenarios), the HTTP
# response code will be 422 ("Unprocessable Entity") [RFC 4918].
#
t_http_code=$(curl "${MY_CURL_OPTS[@]}" \
                   https://api.github.com/user/repos )
t_estat=$?
# set +x

if test $t_estat -ne 0; then
    printf "${PROG} (error): was error while invoking curl(1) to create repo; bailing out\n" 1>&2
    exit 1
fi
if test -z "${t_http_code}"; then
    printf "${PROG} (error): curl(1) command succeeded, but no HTTP response code emitted; bailing out\n" 1>&2
    exit 1
fi

if test '201' = "${t_http_code}"; then
    if $BE_VERBOSE; then
        printf "${PROG} (info): successfully created new GitHup repo: %s/%s\n" \
               "${GITHUB_REPO_OWNER}" \
               "${NEW_REPO_NAME}" 1>&2
    fi
else
    printf "${PROG} (error): HTTP response code was: \"%s\"; expected 201 (\"Created\"); bailing out\n" \
           "${t_http_code}" 1>&2
    exit 1
fi

if test -s "${MY_TMP_CURL_OUT_FPATH}"; then :; else
    printf "${PROG} (error): repo created, but JSON response not available; bailing out\n" 1>&2
    exit 1
fi

# FIXME: Is this really useful?
if $DO_EMIT_NEW_REPO_JSON; then
    cat "${MY_TMP_CURL_OUT_FPATH}"
fi

set -x

read -r is_private is_fork dflt_branch_name \
  < <(jq -r '"\(.private) \(.fork) \(.default_branch)"' < "${MY_TMP_CURL_OUT_FPATH}")
if test $? -ne 0; then
    # Hopefully some other (more useful) error message was also emitted by
    # jq(1) or bash(1)...
    printf "${PROG} (error): was unable to extract data from JSON response; bailing out\n" 1>&2
    exit 1
fi

if test "${dflt_branch_name}" = "${MY_DEFAULT_BRANCH_NAME}"; then

    # AUTHOR NOTE (2020-10-04): If somebody encounters this scenario in the
    # wild before the author does, please open an issue on GitHub to let him
    # know about it. It would indicate a (probably good) change in the
    # behavior of the GitHub API that this program should be adapted to
    # interpret more accurately.
    #
    #     https://github.com/salewski/ads-github-tools/issues
    #
    printf "${PROG} (warning): unexpected success: GitHub API honored our initial 'default_branch' request\n" 1>&2
    # Keep going...
else
    # Since our requested default branch name was ignored, we'll check out the
    # repo, rename it locally, and then sync that state to the remote repo.

    git clone 'git@github.com:'"${GITHUB_REPO_OWNER}/${NEW_REPO_NAME}.git" "${MY_TMP_GIT_REPO_FPATH}"
    if test $? -ne 0; then
        printf "${PROG} (error): was unable while trying to clone newly created repo; bailing out\n" 1>&2
        exit 1
    fi

    (
      cd "${MY_TMP_GIT_REPO_FPATH}"
      if test $? -ne 0; then
          printf "${PROG} (error): was unable to cd to directory of newly created repo; bailing out\n" 1>&2
          exit 1  # from subshell
      fi

      # We are currently on the default branch. Let's rename it it.
      #
      git branch --move "${dflt_branch_name}" "${MY_DEFAULT_BRANCH_NAME}"
      if test $? -ne 0; then
          printf "${PROG} (error): was unable to rename branch locally; bailing out\n" 1>&2
          exit 1  # from subshell
      fi

      # Let the repo represented by our 'origin' remote know that there's a new branch
      git push --set-upstream origin "${MY_DEFAULT_BRANCH_NAME}"
      if test $? -ne 0; then
          printf "${PROG} (error): was unable to push new branch to origin; bailing out\n" 1>&2
          exit 1  # from subshell
      fi

      # locally: Switch our default branch
      git remote set-head origin "${MY_DEFAULT_BRANCH_NAME}"
      if test $? -ne 0; then
          printf "${PROG} (error): was unable to switch default branch locally; bailing out\n" 1>&2
          exit 1  # from subshell
      fi

      # Note that our local repo will still have a remote ref for the original
      # repo branch until we tell the remote to delete it below.

      # remotely: Change the default branch for the repo
      json_patch_dflt_name=$(cat - <<EOF
{
    "default_branch": "${MY_DEFAULT_BRANCH_NAME}"
}
EOF
)

      MY_CURL_OPTS=()  # (re)set
      MY_CURL_OPTS+=( "${MY_CURL_DEFAULT_OPTS[@]}" )  # copy

      MY_CURL_OPTS+=( '--data' )  # implies POST (overridden below)
      MY_CURL_OPTS+=( "${json_patch_dflt_name}" )

      MY_CURL_OPTS+=( '--request' )  # -X
      MY_CURL_OPTS+=( 'PATCH'     )  # override POST; use PATCH instead

      if $BE_VERBOSE; then
          printf "${PROG} (info): remotely: attempting to PATCH dflt branch name for GitHup repo: %s/%s\n" \
                 "${GITHUB_REPO_OWNER}" \
                 "${NEW_REPO_NAME}" 1>&2
      fi

      # "Update a repository"
      #     https://developer.github.com/v3/repos/#update-a-repository
      #     https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#update-a-repository
      #
      # Known possible responses:
      #     200 OK
      #     403 Forbidden
      #     404 Not Found
      #     422 Unprocessable Entity
      #
      # On success, the returned JSON response should reflect the changes we
      # attempted to "PATCH in".
      #
      t_http_code=$(curl "${MY_CURL_OPTS[@]}" \
                         "https://api.github.com/repos/${GITHUB_REPO_OWNER}/${NEW_REPO_NAME}" )
      t_estat=$?
      if test $t_estat -ne 0; then
          printf "${PROG} (error): was error while invoking curl(1) to PATCH existing repo; bailing out\n" 1>&2
          exit 1  # from subshell
      fi
      if test -z "${t_http_code}"; then
          printf "${PROG} (error): curl(1) command succeeded, but no HTTP response code emitted for PATCH; bailing out\n" 1>&2
          exit 1  # from subshell
      fi

      case ${t_http_code} in
        '200')  # "OK"
            if $BE_VERBOSE; then
                # CAREFUL: We'll note that the PATCH operation succeeded, but
                #          don't want to suggest that the actual default
                #          branch change succeeded until we confirm below by
                #          reading the expected values back in the JSON
                #          response we received.
                printf "${PROG} (info): successfully PATCHed existing GitHup repo: %s/%s\n" \
                       "${GITHUB_REPO_OWNER}" \
                       "${NEW_REPO_NAME}" 1>&2
            fi
            ;;

        '403')
            printf "${PROG} (error): curl(1) PATCH resulted in a 403 (\"Forbidden\"); was unable to patch repo: %s/%s; bailing out\n" \
                   "${GITHUB_REPO_OWNER}" \
                   "${NEW_REPO_NAME}" 1>&2
            exit 1  # from subshell
            ;;

        '404')
            # This should only happen if some other process is attempting to
            # modify the repo at the same time we are.
            #
            printf "${PROG} (error): curl(1) PATCH resulted in a 404 (\"Not Found\"); existing GitHup repo deleted by some other means (not us): %s/%s; bailing out\n" \
                   "${GITHUB_REPO_OWNER}" \
                   "${NEW_REPO_NAME}" 1>&2
            exit 1  # from subshell
            ;;

        '422')  # "Unprocessable Entity"
            # This one is probably a bug in the current program related to not
            # structuring our PATCH request correctly (including problems
            # related to encoding the data correctly).
            #
            printf "${PROG} (error): curl(1) PATCH resulted in a 422 (\"Unprocessable Entity\"); was unable to patch repo: %s/%s; bailing out\n" \
                   "${GITHUB_REPO_OWNER}" \
                   "${NEW_REPO_NAME}" 1>&2
            exit 1  # from subshell
            ;;

        *)
          printf "${PROG} (error): HTTP response code for PATCH command was: \"%s\"; expected 200 (\"OK\"); bailing out\n" \
                 "${t_http_code}" 1>&2
          exit 1  # from subshell
          ;;
      esac

      # Ensure the default_branch name in-use (as reflected in the JSON
      # response to our PATCH operation) actually reflects the name we
      # requested.
      read -r rsp_dflt_branch_name \
           < <(jq -r '"\(.default_branch)"' < "${MY_TMP_CURL_OUT_FPATH}")
      if test $? -ne 0; then
          # Hopefully some other (more useful) error message was also emitted
          # by jq(1) or bash(1)...
          printf "${PROG} (error): was unable to extract data from PATCH JSON response; bailing out\n" 1>&2
          exit 1  # from subshell
      fi

      if test "${rsp_dflt_branch_name}" = "${MY_DEFAULT_BRANCH_NAME}"; then
          printf "${PROG} (info): successfully changed default branch for existing GitHup repo: %s/%s\n" \
                 "${GITHUB_REPO_OWNER}" \
                 "${NEW_REPO_NAME}" 1>&2
      else
          if test "${rsp_dflt_branch_name}" = "${dflt_branch_name}"; then
              printf "${PROG} (error): PATCH op to change default branch name succeeded, but request was ignored by the GitHub API; bailing out\n" 1>&2
              exit 1  # from subshell
          fi

          printf "${PROG} (error): PATCH op to change default branch name succeeded, but new default branch name is unexpected value (\"%s\"); bailing out\n" \
                 "${rsp_dflt_branch_name}" 1>&2
          exit 1  # from subshell
      fi

      # remotely: Delete old default branch from GitHub repo
      git push origin --delete "${dflt_branch_name}"
      if test $? -ne 0; then
          printf "${PROG} (error): was unable to delete old default branch remotely; bailing out\n" 1>&2
          exit 1  # from subshell
      fi

      if $BE_VERBOSE; then
          printf "${PROG} (info): successfully changed default branch for GitHup repo: %s/%s\n" \
                 "${GITHUB_REPO_OWNER}" \
                 "${NEW_REPO_NAME}" 1>&2
      fi
      exit 0  # from subshell
    )
    if test $? -ne 0; then
        # Error message already printed in subshell
        exit 1
    fi
fi


if $DEBUGGING; then
    printf "${PROG} (debug): cleaning up tmp directory: %s\n" "${MY_TMP_CURL_OUT_FPATH}" 1>&2
fi
rm -fr "${MY_TMP_DIR}"
