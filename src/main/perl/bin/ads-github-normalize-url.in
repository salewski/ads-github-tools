#! @PERL@
# -*- perl -*-
# @configure_input@

# Copyright (c) 2016, 2020 Alan D. Salewski <ads@salewski.email>
#
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, write to the Free Software Foundation,
#     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,, USA.

# ads-github-normalize-url: Normalize the URL provided on the command
# line. Emit the normalized representation of URL on stdout.
#
# The URL emitted on stdout is sutiable for hashing or otherwise using as an
# input to some function for generating an ID for the normalized URL.
#
#
# Motivation
# ==========
#
# There are many different and legitimate ways to represent URLs; while
# variations of a given URL may represent the same logical resource, the text
# representations of the URLs themselves can vary. For the purposes to
# generating identifiers for a given logical URL (e.g., for use in a cache) or
# when comparing two URLs directly, the textual variations need to be put into
# a "normalized" form to allow their textual representations to be
# meaningfully compared. For example, among other transformations, the query
# parameters will be put into alphabetical order.
#
#
# CAVEATS:
# ========
#
#    * The current implementation is not compliant with RFC 3986, and may
#      produce URLs that are actually broken. In particular, the normalization
#      performed here may be incomplete with reference to that spec, and we
#      explicitly remove both '.' and '..' path segments from the URL. This is
#      likely to change in the future, so please do not write any code that
#      depends on the precise output emitted here overly much.
#
#
# See Also
# ========
#
#     * RFC 3986 "Uniform Resource Identifier (URI): Generic Syntax", Section 6 ("Normalization and Comparison")
#       https://tools.ietf.org/html/rfc3986
#
#     * https://en.wikipedia.org/wiki/URL_normalization
#

package _PROG_ADS_GITHUB_NORMALIZE_URL;

use strict;
use warnings;

# Fixup @INC so that all Perl mods needed by the prog can be found
# ___REPLACE_ME__BEGIN_BLOCK__CONFIGURED_PERL_INC___

use Carp qw( confess cluck );

use Getopt::Long   qw( GetOptions );

use URL::Normalize 0.33;  # Note: this dep is X11 (MIT) licensed

# We want perl to check for valid UTF-8 input as it is read, and any invalid
# UTF-8 found to throw a fatal exception.
use warnings q{utf8};
use warnings FATAL => q{utf8};

# Set the encoding on all newly opened filehandles. This says that any "open"
# without a specified encoding will default to UTF-8, as will STDIN, STDOUT,
# and STDERR:
use open qw( :encoding(UTF-8) :std );

my $MAINTAINER = q{@PACKAGE_BUGREPORT@};  # filtered-in at build time

our $VERSION = q{@VERSION@};  # filtered-in at build time

my $PROG = q{ads-github-normalize-url};
my $BUILD_DATE   = q{@BUILD_DATE@};  # filtered-in at build time
my $PROJECT_NAME = q{@PACKAGE@};     # filtered-in at build time

my $RELEASE_STRING = qq{$VERSION  (built: $BUILD_DATE)};


my $ESTAT_SUCCESS = 0;
my $ESTAT_ERROR   = 1;

# Options
Getopt::Long::Configure(qw( bundling
                            bundling_override
                            no_auto_abbrev
                            no_auto_help
                            no_auto_version
                            no_getopt_compat
                            no_gnu_compat
                            no_ignore_case_always
                            no_pass_through
                            no_require_order
                            permute));

my $BE_VERBOSE   = 0;  # info-level output; enable with one '-v' opt
my $DEBUGGING    = 0;  # debug-level output; enable with two '-v' opts
my $TRACING      = 0;  # trace-level output; enable with three or more '-v' opts

my $SHOW_HELP    = 0;
my $SHOW_VERSION = 0;


# Returns the function name of the calling function. Functions can use this
# as a generic way to get their own name without sprinkling clunky caller()
# invocations all over the place.
sub __func {
    # ($package,   $filename, $line,       $subroutine, $hasargs,
    #  $wantarray, $evaltext, $is_require, $hints,      $bitmask) = caller($ii);
    return (caller(1))[3];
}

# Prints "help" message on the supplied stream
sub print_usage {
    my ($where) = @_;
    print $where <<"EOH";
Usage: $PROG [OPTION...] [URL]
Emit on stdout the normalized representation of URL.
If URL is not provided on the command line, then it is read from stdin.

Options:

  -h, --help     Display this message and then exit
  -V, --version  Print program version on stdout and then exit

  -v, --verbose  Print program progress messages on stderr. Specify multiple
                   times to increase verbosity; info, debug, and tracing

  --             Signals the end of options and disables further options processing.

Report bugs to $MAINTAINER.
EOH
}

# Prints program version info on stdout
sub print_version {
    print <<"EOV";
$PROG $RELEASE_STRING
Copyright (C) 2016, 2020 Alan D. Salewski
License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Alan D. Salewski.
EOV
    return;
}


# @return "normalized" version of provided URL.
#
# FIXME: Review whether or not we should adhere more closely to RFC 3986
#        section 6; for now, the most important thing for my use case is that
#        a consistent URL is emitted for the purpose of generating an id for
#        use in generating a cache key.
#
sub normalize_url {

    my $args = { URL => undef,
                 @_  # caller-provided named params override above default(s)
               };

    confess( __func(), q{(): }, q{undef provided for required 'URL' param} )
        unless ( defined( $args->{URL} ));

    my $normalizer = URL::Normalize->new( $args->{URL} );

    # before: http://www.example.com/index.cgi?foo=/'
    # after:  http://www.example.com/?foo=/
    #
    $normalizer->remove_directory_index;

    # XXX: As noted in URL::Normalize(3pm), this method does NOT follow the
    #      algorithm described in RFC 3986, but rather flattens (removes) each
    #      path segment.
    #
    # before: http://www.example.com/../a/b/../c/./d.html
    # after:  http://www.example.com/a/c/d.html
    #
    $normalizer->remove_dot_segments;

    # before: http://www.example.com/foo//bar.html
    # after:  http://www.example.com/foo/bar.html
    #
    $normalizer->remove_duplicate_slashes;

    # before: http://www.example.com/?a=1&a=2&b=4&a=1&c=4
    # after:  http://www.example.com/?a=1&a=2&b=3&c=4
    #
    $normalizer->remove_duplicate_query_parameters;

    # before: http://www.example.com/foo?
    # after:  http://www.example.com/foo
    #
    $normalizer->remove_empty_query;

    # # before: http://www.example.com/bar.html#section1
    # # after:  http://www.example.com/bar.html
    # #
    # $normalizer->remove_fragment;

    # before: http://www.example.com/?b=2&c=3&a=0&A=1
    # after:  http://www.example.com/?a=0&A=1&b=2&c=3
    #
    $normalizer->sort_query_parameters;

    my $normalized_url = $normalizer->url;

    return $normalized_url;
}


# +-------------------------------+
# |  main of program starts here  |
# +-------------------------------+

unless ( GetOptions(
                    q{h|help}          => \$SHOW_HELP,
                    q{V|version}       => \$SHOW_VERSION,
                    q{v|verbose}       => sub {
                                              ++$TRACING   if ( $DEBUGGING  && !$TRACING   );
                                              ++$DEBUGGING if ( $BE_VERBOSE && !$DEBUGGING );
                                              ++$BE_VERBOSE unless $BE_VERBOSE;
                                          },
                   ))
{
    print_usage( \*STDERR );
    exit $ESTAT_ERROR;
}

if ($SHOW_HELP) {
    print_usage( \*STDOUT );
    exit $ESTAT_SUCCESS;
}

if ($SHOW_VERSION) {
    print_version;
    exit $ESTAT_SUCCESS;
}

my $URL;
if ( 0 == scalar( @ARGV )) {
    print STDERR qq{$PROG (info): URL not provided on command line; attempting to read it from stdin\n}
        if $BE_VERBOSE;

    $URL = <STDIN>;
    chomp $URL;

    print STDERR qq{$PROG (info): input URL read from stdin: "$URL"\n}
        if $BE_VERBOSE;

}
elsif ( 1 == scalar( @ARGV )) {

    $URL = shift;

    print STDERR qq{$PROG (info): input URL: "$URL"\n}
        if $BE_VERBOSE;
}
else {
    print STDERR qq{$PROG (error): multiple URL options provided on command line (@ARGV); expected zero or one; bailing out\n};
    print_usage( \*STDERR );
    exit $ESTAT_ERROR;
}

my $normalized_url = normalize_url( URL => $URL );

print STDOUT qq{$normalized_url\n};

exit 0;

__END__

#
# ----------------------------------------------------------------------------
# Documentation
#
# The docs are in Perl's POD format, so you can run either the 'perldoc' or
# 'pod2man' programs on this file to produce a man page.
#
# To generate a man page for distribution (in a tarball or RPM, for instance),
# you'll probably want to run pod2man something like this:
#
#     $ pod2man /path/to/this/file \
#               --center='ads-github-tools' \
#               --release='ads-github-tools-0.1.0' \
#               --section='1' \
#               > /outputdir/ads-github-normalize-url.1
#
# To inspect the page formatting, etc., you can pipe the above 'pod2man'
# command to:
#
#     'man -l -'
#
# instead of redirecting the output to a file.
#
# ----------------------------------------------------------------------------

=pod

=head1 NAME

  ads-github-normalize-url - Normalize the URL provided on the command line


=head1 SYNOPSIS

  ads-github-normalize-url --help
  ads-github-normalize-url --version

  ads-github-normalize-url [OPTION...] [URL]


=head1 DESCRIPTION

C<ads-github-normalize-url> is part of the C<ads-github-tools> project.

The C<ads-github-normalize-url> program normalizes the URL provided on the
command line. The normalized representation of the URL is written to stdout.


=head2 Motivation

There are many different and legitimate ways to represent URLs; while
variations of a given URL may represent the same logical resource, the text
representations of the URLs themselves can vary. For the purposes to
generating identifiers for a given logical URL (e.g., for use in a cache) or
when comparing two URLs directly, the textual variations need to be put into
a "normalized" form to allow their textual representations to be
meaningfully compared. For example, among other transformations, the query
parameters will be put into alphabetical order.


=head1 OPTIONS

Below are the command line options currently accepted by
C<ads-github-normalize-url>.


=over 4

=item -h, --help

Print help usage message


=item -V, --version

Print the version of the program to stdout and then exit.


=item -v, --verbose

Turn on verbose mode. Causes program to emit messages on C<stderr> indicating
what it is doing. The option may be specified multiple times to increase
fruther the level of verbosity. One C<-v> option enables info-level output;
two such opts enable debug-level output; three or more enable trace-level
output.


=item --

Signals the end of options and disables further options processing. This is
useful in the pathological scenario in which the URL parameter would otherwise
be interpretted as a command line option.

=back


=head1 DIAGNOSTICS

Exits with zero on success, non-zero on error.


=head1 BUGS

=over 4

=item Not (currently) compliant with RFC 3986

The current implementation is not compliant with RFC 3986, and may produce
URLs that are actually broken. In particular, the normalization performed here
may be incomplete with reference to that spec, and we explicitly remove both
C<.> and C<..> path segments from the URL. This is likely to change in the
future, so please do not write any code that depends on the precise output
emitted here overly much.


=item Probably others

If you find any, please report them as described in the C<BUGS> file.

=back


=head1 SEE ALSO

=over 4

=item git-hash-object(1)

This program is intended to be similar in spirit to L<git-hash-object(1)>,
only for use by the C<ads-github-tools>.


=item RFC 3986

Documents algorithm to "normalize" URLs for comparison (i.e., for use with
HTTP proxy servers)

=back


=head1 AUTHOR

=over 4

=item Alan D. Salewski  <ads@salewski.email>

=back


=head1 COPYRIGHT

Copyright 2016, 2020 Alan D. Salewski

=cut

