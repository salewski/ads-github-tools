#! @BASH_SH@ -
# @configure_input@

# SPDX-FileCopyrightText: <text> Â© 2016, 2017, 2020 Alan D. Salewski <ads@salewski.email> </text>
# SPDX-License-Identifier: GPL-2.0-or-later
#
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, write to the Free Software Foundation,
#     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,, USA.

# ads-github-show-rate-limits: Show user's GitHub API rate limits. Makes an
# authenticated HTTPS 'GET' request to the GitHub API (using curl) to obtain
# the response body that contains a JSON representation of the service rate
# limit information. The rate limit information is parsed out of the JSON
# structure and presented to the user.
#
# The default output (whitespace delimited columns of plain text) is suitable
# for a user working interactively in a shell and for use in a Unix shell
# pipeline.
#
# The --output-format=WORD option can be used to request output in different
# formats. At the time of writing (2017-03-12), only two formats are
# supported: 'text' and 'json'.
#
# FIXME: A future version will provide options to allow the user to request
#        output in additional specific formats (edn, transit).
#
# All requests are made over HTTPS.
#
# Authentication
# ==============
# No authentication data is used directly; the curl(1) '-n' (--netrc) option
# is used, so the user is expected to have his GitHub credentials stored in a
# ~/.netrc file. For details on setting that up, see curl(1) and
# netrc(5). Note that curl will not use the ~/.netrc file if the permissions
# allow reading by group or other.
#
# HINT: The relevant line ~/.netrc file content should have the form:
#
#     machine api.github.com login YOUR_USER_NAME password YOUR_GITHUB_PERSONAL_ACCESS_TOKEN
#
# CAVEAT: Use of the netrc(5) configuration means that this tool is ultimately
# using HTTP Basic authentication (username/password) with the GitHub
# API. Though all communication is conducted over HTTPS (so is encrypted "on
# the wire"), this authentication mechanism (available through 2020-11-13; see
# below) allows this tool to access the full power of the GitHub API.
#
# UPDATE (2020-10-05): GitHub has officially deprecated password-based
#        authentication, and it will be disabled entirely on 2020-11-13:
#
#            https://developer.github.com/changes/2020-02-14-deprecating-password-auth/
#
#        A better approach (which you were probably using already, anyway) is
#        to create what GitHub calls a "personal access token":
#
#            https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token
#
#        You use a "personal access token" in basically the same way that you
#        would use a password (you put it in your ~/.netrc file as the value
#        for the 'password' field), but the token itself can be configured to
#        have more constrained permissions (you decide what it can do at the
#        time you create the token).
#
#        You may wish to create a token that is not able to perform certain
#        actions (e.g., deleting repositories). That will have a minor impact
#        on the ads-github-tools, but they will simply tell you when they are
#        not able to perform some action.
#
# DO NOT USE THIS TOOL UNLESS YOU TRUST THAT IT IS NOT ABUSING THIS TRUST.
#
#
# Motivation
# ==========
#
# When working with the programs provided by the 'ads-github-tools' project
# (or really any tool that makes calls to the GitHub API) you will want to be
# able to confirm that you are within your rate limit and how many requests
# you still have left before you hit your cap.
#
# You may also be working on a set of similar tools and just want to confirm
# that they are working as expected -- not incurring hits against your GitHub
# API rate limit when you do not expect them to.
#
#
# TODO
# ====
#
#     * Add additional output formats (edn, transit, others?) controlled by
#       the -O (--output-format=WORD) option.
#
# See Also:
# =========
#
#     * The 'Rate Limiting' section of the GitHub API (v3)
#       https://developer.github.com/v3/#rate-limiting
#       https://developer.github.com/v3/rate_limit/
#
#     * The 'git-hub' tool:
#       https://github.com/sociomantic-tsunami/git-hub

declare -r PROG='ads-github-show-rate-limits'

set -o pipefail

# declare -r MAINTAINER='@DFLT_MAINTAINER_FULL@'
declare -r MAINTAINER='@PACKAGE_BUGREPORT@'  # value filtered-in at build time

declare -r VERSION='@VERSION@'  # value filtered-in at build time

declare -r gl_const_build_date='@BUILD_DATE@'  # value filtered-in at build time
declare -r gl_const_release="${VERSION}  (built: ${gl_const_build_date})"
# declare -r gl_const_release="${VERSION}"

BE_VERBOSE=false # info-level output; override with one '-v' opt

# This one implies BE_VERBOSE, too
DEBUGGING=false  # debug-level output; override with two '-v' opts


# Think of this as the "global human readable" flag.
#
# We also have field-specific human readable flags (named in the form
# HUMAN_READABLE_FOO_MODE) that allow us to support certain use cases (such as
# implying human readable for only the reset date field when the '-u' option
# is provided). Setting the global human readable flag has the effect of
# implicitly setting all such field-specific flags.
#
HUMAN_READABLE_MODE=false  # override with '-h' (--human-readable) opt
#
HUMAN_READABLE_LIMIT_COUNT_MODE=false       # set implicitly when the '-h' opt is provided
HUMAN_READABLE_REMAINING_COUNT_MODE=false   # set implicitly when the '-h' opt is provided
HUMAN_READABLE_DATE_MODE=false              # set implicitly when either the '-h' or '-u' opts (or both) are provided

# Note that setting UTC_DATE_MODE implicitly sets HUMAN_READABLE_DATE_MODE, too.
UTC_DATE_MODE=false  # override with '-u' (--utc or --universal) opt


# Keys are internal values used by the program; values are allowed names for user-specified formats.
declare -A LEGIT_OUTPUT_FORMAT_SYM_TO_NAME=()
LEGIT_OUTPUT_FORMAT_SYM_TO_NAME['JSON']='json'  # see also: https://github.com/salewski/ads-github-tools/issues/8
LEGIT_OUTPUT_FORMAT_SYM_TO_NAME['TEXT']='text'  # the default

DFLT_OUTPUT_FORMAT=${LEGIT_OUTPUT_FORMAT_SYM_TO_NAME['TEXT']}

OUTPUT_FORMAT=    # set with '-O' (--output-format=WORD)


declare -r gl_const_re_all_digits='^[[:digit:]]{1,}$'


# Folks using GitHub Enterprise might access their API at a different
# location, so we parameterize the base URL for the GitHub API. MAKE SURE THIS
# URL INDICATES HTTPS (not just HTTP -- you do not want your HTTP Basic Auth
# credentials being transmitted in cleartext!).
#
# This is NOT declared read-only here because there is some minor fixup that
# we attempt so users do not need to be concerned with whether or not the URL
# ends with a slash. For our purposes we need the value to end with a slash,
# and will add a slash to the end if it is not specified here.
#
declare    gl_const_github_api_base_url='https://api.github.com/'

# We'll help future-proof this program by explicitly requesting version 3 of
# the GitHub API (although it is the default at the time of writing
# (2016-04)).
#
declare -r gl_const_http_accept_github_version='Accept: application/vnd.github.v3+json'


# By default we'll use the external programs found at configure-time (values
# are filtered-in here at build time). But we allow the user to override any
# particular tool by setting an environment variable named after the tool
# (with hyphen chars changed to underscores).

# jq - command line JSON parser and manipulation language
#      see: https://github.com/stedolan/jq
#
JQ_PROG="${JQ:-@JQ_PROG@}"
RM_PROG="${RM:-@RM@}"

CAT_PROG="${CAT:-@CAT@}"

CURL_PROG="${CURL:-@CURL_PROG@}"
EXPR_PROG="${EXPR:-@EXPR_PROG@}"

MKTEMP_PROG="${MKTEMP:-@MKTEMP_PROG@}"

declare -a NEEDED_EXTERNAL_PROGS=(
    "${JQ_PROG}"
    "${RM_PROG}"

    "${CAT_PROG}"

    "${CURL_PROG}"
    "${EXPR_PROG}"

    "${MKTEMP_PROG}"
)


declare -a F_CLEANUP_HOOK_NAMES=()

function f_add_cleanup_hook_name () {
    F_CLEANUP_HOOK_NAMES+=( $1 );
}


function f_cleanup () {

    if test ${#F_CLEANUP_HOOK_NAMES[@]} -eq 0; then
        # No cleanup hooks, so nothing to do
        return
    fi

    local cleanup_hook
    local idx

    let idx=${#F_CLEANUP_HOOK_NAMES[@]}-1

    # Note that we're running the cleanup hooks in opposite order from which
    # they were installed.
    #
    while test $idx -ge 0; do

        cleanup_hook=${F_CLEANUP_HOOK_NAMES[$idx]}

        if $BE_VERBOSE; then
            printf "${PROG} (info): running cleanup hook: [%s]\n" "${cleanup_hook}" 1>&2
        fi

        test -n "$cleanup_hook" && eval "$cleanup_hook"

        let idx=$idx-1
    done
}

function f_cleanup_and_die () {
    f_cleanup
    exit 1
}

trap 'printf "$PROG (warn): HUP signal caught; bailing out\n"  1>&2; f_cleanup_and_die' HUP
trap 'printf "$PROG (warn): INT signal caught; bailing out\n"  1>&2; f_cleanup_and_die' INT
trap 'printf "$PROG (warn): QUIT signal caught; bailing out\n" 1>&2; f_cleanup_and_die' QUIT
trap 'printf "$PROG (warn): TERM signal caught; bailing out\n" 1>&2; f_cleanup_and_die' TERM

trap 'f_cleanup' EXIT



f_print_help () {

    "${CAT_PROG}" <<EOF
usage: $PROG { -h | --help }
  or:  $PROG { -V | --version }
  or:  $PROG [OPTION...]

Requests user's rate limit information from GitHub and displays it on stdout

Mandatory arguments to long options are mandatory for short options, too.

      --help                Print this help message on stdout
  -V, --version             Print the version of the program on stdout

  -h, --human-readable      Print numbers and dates in human readable format (e.g., "4,835")
                              Dates will be in local time unless '-u' is also specified

  -O, --output-format=WORD  Emit output in the format specified by WORD [default: text]
                              Valid values for WORD include: 'text' and 'json'

  -u, --utc, --universal    Print dates in human-readable Coordinated Universal Time (UTC)
                              Overrides "local time" conversion when specified with '-h'

  -v, --verbose             Print program progress messages on stderr. Specify multiple
                              times to increase verbosity: info, debug, and tracing (set -x)

      --                    Signals the end of options and disables further options processing.

Report bugs to $MAINTAINER.
EOF
}

f_print_version () {
    "${CAT_PROG}" <<EOF
${PROG} ${gl_const_release}
Copyright (C) 2016, 2017, 2020 Alan D. Salewski
License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Alan D. Salewski.
EOF
}

# Invoked by our accumulating '-v' (--verbose) option. Increases the program
# output verbosity level by "one stage".
#
# If we have not yet increased the verbosity, then enables info-level output
# ($BE_VERBOSE).
#
# If we are currently at info-level verbosity, then enables debug-level output
# ($DEBUGGING).
#
# If we are currently at debug-level verbosity, then enables trace-level
# output (set -x).
#
# If we are already at trace-level verbosity, then this function has no effect
# (is effectively a NOOP).
#
f_maybe_increase_verbosity () {

    if $BE_VERBOSE; then

        # We are (at least) at info-level verbosity currently.
        if $DEBUGGING; then
            # We are (at least) at debug-level verbosity currently.

            case $- in
                *x* )
                    : $PROG \(trace: $LINENO\): tracing already enabled
                    ;;
                * )
                    printf "${PROG} (debug): additional verbosity requested; enabling trace-level output\n" 1>&2
                    set -x
                    ;;
            esac
        else
            printf "${PROG} (info): additional verbosity requested; enabling debug-level output\n" 1>&2
            DEBUGGING=true
        fi
    else
        printf "${PROG} (info): verbose output requested; enabling info-level output\n" 1>&2
        BE_VERBOSE=true
    fi
}


# Checks if FORMAT_NAME is one of the legitimate names for an output format
# (all legit format names are present as values in our $LEGIT_OUTPUT_FORMAT_SYM_TO_NAME
# associative array).
#
# If the provided FORMAT_NAME is legit, then $OUTPUT_FORMAT will be set to its
# corresponding internal name (the corresponding key in $LEGIT_OUTPUT_FORMAT_SYM_TO_NAME).
#
# Otherwise a message is printed on stderr and the program exits with an error status.
#
# @param CLI_OPT_NAME - (required) The name of the command line option to which FORMAT_NAME was provided as an argument
#
# @param FORMAT_NAME  - (required) A a user-provided format name value.
#
f_set_output_format_or_die () {

    local __required_count=2
    if test $# -ne ${__required_count}; then
        printf "${PROG} (BUG): ${FUNCNAME}() invoked with %d args; exactly %d required; bailing out\n" \
            $# ${__required_count} 1>&2
        exit 1
    fi

    local -r __cli_opt_name=$1
    local -r __format_name_to_check=$2

    # We will use this to display a comma-separated list of the legit options
    # in the event that we need to emit an error message.
    #
    local __t_flattened_format_opt_names=''

    for __t_key_name in "${!LEGIT_OUTPUT_FORMAT_SYM_TO_NAME[@]}"; do

        __t_legit_format_name="${LEGIT_OUTPUT_FORMAT_SYM_TO_NAME["${__t_key_name}"]}"

        if test "${__t_legit_format_name}" = "${__format_name_to_check}"; then
            OUTPUT_FORMAT=${__t_key_name}
            return 0  # success
        fi

        if test -n "${__t_flattened_format_opt_names}"; then
            __t_flattened_format_opt_names="${__t_flattened_format_opt_names}"', '  # append comma-space
        fi
        __t_flattened_format_opt_names="${__t_flattened_format_opt_names}${__t_legit_format_name}"
    done

    printf "${PROG} (error): invalid format name \"%s\" provided for '%s' option; valid values include: [%s]; bailing out\n" \
           "${__format_name_to_check}" \
           "${__cli_opt_name}"         \
           "${__t_flattened_format_opt_names}" 1>&2

    # This is the "...or die" part...
    exit 1
}


pos_last_plus_one=$(( $# + 1 ))

# Each value is one or zero, which indicates whether or not the option is
# expected to have an argument.
#
declare -A longopt_spec=(
    ['help']=0       # (no short-form equivalent)
    ['version']=0    # -V

    ['output-format']=1  # -O

    # These are two flavors for the same long-form option (modelled after the opts for GNU date(1))
    ['utc']=0        # -u
    ['universal']=0  # -u

    ['verbose']=0    # -v

    ['human-readable']=0  # -h
)

# internal sanity check
for one_key in "${!longopt_spec[@]}"; do
    one_val=${longopt_spec[${one_key}]}
    if [[ $one_val =~ ^[01]$ ]]; then :; else
        printf "${PROG} (BUG) [line $LINENO]: value (%s) for longopt key '%s' must be either 0 or 1; bailing out\n" \
               "${one_val}" "${one_key}" 1>&2
        exit 1
    fi
done

if test $# -gt 0; then

    # Using getopts in "silent mode". Note that adding '-' to the optstring allows us to
    # process GNU-style long-form options; that option is specified to take an argument to
    # cause getopts to place whatever follows the second '-' character into OPTARG.
    #
    # Note that getopts will automatically stop processsing options upon encountering
    # '--', but we still need to deal with the pathological form --=BLAH (no option name,
    # just a value using the equals-sign syntax).
    #
    while getopts ':-:hO:uVv' opt
    do
        : $PROG \(trace: $LINENO\): opt is: $opt
        : $PROG \(trace: $LINENO\): OPTARG is: $OPTARG
        : $PROG \(trace: $LINENO\): OPTIND is: $OPTIND

        if test "${opt}" = '-'; then

            # Intercepting processing of long-form option. This conditional
            # block will set up the 'opt', 'OPTARG', and 'OPTIND' variables for
            # the code that follows, just as if getopts had the capability to
            # process long-form options.

            # OPTARG here is one of:
            #
            #     =BLAH    (which means user specified '--=BLAH')
            # or:
            #     foo
            # or:
            #     foo=FOOVAL

            if [[ ${OPTARG} =~ .*=.* ]]; then

                : $PROG \(trace: $LINENO\): OPTARG is name=value style

                # Keep everything up to the first '=' sign. Note that if the
                # option was specified as: --foo=FOOVAL, then $opt here will be
                # 'foo' (no hyphen chars).
                opt=${OPTARG/=*/}
                : $PROG \(trace: $LINENO\): opt is: $opt

                : $PROG \(trace: $LINENO\): a long option name must be at least two characters in length
                if test ${#opt} -le 1; then
                    printf "${PROG} (error): invalid long option '%s'; bailing out\n" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                t_exists=false
                for one_key in "${!longopt_spec[@]}"; do
                    if test "${opt}" = "${one_key}"; then
                        t_exists=true
                        break
                    fi
                done

                : $PROG \(trace: $LINENO\): a long option name must be one that the program is expecting
                if $t_exists; then :; else

                    printf "${PROG} (error): invalid long option '%s'; bailing out\n" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                # Since we know the option was specified in --foo=BAR form, the
                # option was specified erroneously unless the option's long-form
                # spec indicates that it can accept an argument.
                #
                if test ${longopt_spec[${opt}]} -ne 1; then
                    printf "${PROG} (error): option '%s' does not take an argument; bailing out\n" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                OPTARG=${OPTARG#*=}  # keep everything after the first '=' sign
                : $PROG \(trace: $LINENO\): OPTARG is: $OPTARG

            else
                : $PROG \(trace: $LINENO\): OPTARG is name-only style

                opt="$OPTARG"
                : $PROG \(trace: $LINENO\): opt is: $opt

                if test -z "${opt}"; then

                    # This should be a "can't happen" scenario; since bash's 'getopts'
                    # implementation should directly handle the magic '--' token, we
                    # should never fall through here.

                    printf "${PROG} (BUG) [line $LINENO]: received empty OPTARG, which means getopts did not handle the stand-alone '--' token; bailing out\n" 1>&2
                    exit 1
                fi

                : $PROG \(trace: $LINENO\): a non-empty long option name must be at least two characters in length
                if test ${#opt} -lt 2; then
                    printf "${PROG} (error): invalid long option '%s'; bailing out\n" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                t_exists=false
                for one_key in "${!longopt_spec[@]}"; do
                    if test "${opt}" = "${one_key}"; then
                        t_exists=true
                        break
                    fi
                done

                : $PROG \(trace: $LINENO\): a long option name must be one that the program is expecting
                if $t_exists; then :; else

                    printf "${PROG} (error): invalid long option '%s'; bailing out\n" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                # We know the option was specified in one of the following forms:
                #
                #     --foo
                # or:
                #     --foo FOOVAL
                #
                # The option's long-form spec will tell us whether or not an argument is
                # expected for the option.
                #
                if test ${longopt_spec[${opt}]} -eq 1; then

                    # If bumping OPTIND would put us more than one beyond the "last pos
                    # plus one", then there is no argument provided at position OPTIND for
                    # us to consume.
                    #
                    if (( $(( $OPTIND + 1 )) > pos_last_plus_one )); then

                        printf "${PROG} (error): missing argument for option -${OPTARG}\n" 1>&2
                        f_print_help 1>&2
                        exit 1
                    fi

                    OPTARG=${@:${OPTIND}:1}
                    (( ++OPTIND ))
                    : $PROG \(trace: $LINENO\): manually incremented OPTIND to: $OPTIND
                fi
            fi
        fi

        : $PROG \(trace: $LINENO\): opt is: $opt
        : $PROG \(trace: $LINENO\): OPTARG is: $OPTARG
        : $PROG \(trace: $LINENO\): OPTIND is: $OPTIND

        # Normal getopts style processing happens beneath here, with the slight
        # twist that 'opt' may contain a long-form option name.

        case $opt in

            # Note that 'h' here means '--human-readable', not '--help'; see below.
            #
            'help' )
                # print help message
                f_print_help
                exit 0
                ;;

            'V' | 'version' )
                # print program version info
                f_print_version
                exit 0
                ;;
            'v' | 'verbose' )
                # Accumulating 'verbose' opt. A single -v opt simply turns
                # BE_VERBOSE on (info level output); two '-v' opts turns on
                # $DEBUGGING (debug level output); three or more '-v' opts turns
                # tracing on. Note that if you intend to turn tracing on, you'll
                # probably want your -v opts to be the first opts on the command
                # line (so they take effect earlier).
                #
                f_maybe_increase_verbosity
                ;;


            'h' | 'human-readable' )
                HUMAN_READABLE_MODE=true
                #
                # Setting the "global" human readable flag has the effect of
                # enabling all field-specific human-readable flags
                #
                HUMAN_READABLE_LIMIT_COUNT_MODE=true
                HUMAN_READABLE_REMAINING_COUNT_MODE=true
                HUMAN_READABLE_DATE_MODE=true
                ;;


            'O' | 'output-format' )
                t_local_opt_string='-'"${opt}"  # correct for single-letter option name
                if test "${#opt}" -gt 1; then
                    t_local_opt_string='-'"${t_local_opt_string}"  # correct for long-form option name
                fi
                f_set_output_format_or_die "${t_local_opt_string}" "${OPTARG}"
                ;;


            'u' | 'utc' | 'universal' )
                UTC_DATE_MODE=true
                #
                # Setting UTC_DATE_MODE implicitly sets HUMAN_READABLE_DATE_MODE, too
                HUMAN_READABLE_DATE_MODE=true
                ;;


            ':')  # getopts put : in opt
                  # Note that we need to restore the leading '-' that getopts
                  # has sliced off.
                  printf "${PROG} (error): missing argument for option -${OPTARG}\n" 1>&2
                  f_print_help 1>&2
                  exit 1
                  ;;

            '?')  # getopts put ? in opt
                  # Unrecognized option. Note that we need to restore the
                  # leading '-' that getopts has sliced off.
                  printf "${PROG} (error): unrecognized option '-%s'; bailing out\n" "${OPTARG}" 1>&2
                  f_print_help 1>&2
                  exit 1
                  ;;

            * )   printf "${PROG} (BUG) [line $LINENO]: unhandled option case; opt: '$opt',  OPTARG: '$OPTARG'\n" 1>&2
                  ;;

        esac
    done
fi

# shift off all arguments already handled
let ii=1;  # shell OPTIND index starts at 1
while (( ii < ${OPTIND} )); do
    shift
    (( ++ii ))
    : $PROG \(trace: $LINENO\): ii is now: $ii
done

if test $# -gt 0; then
    printf "${PROG} (error): unrecognized command line parameters: \"%s\"; bailing out\n" "$*" 1>&2
    f_print_help 1>&2
    exit 1
fi


if test -z "${OUTPUT_FORMAT}"; then
    OUTPUT_FORMAT=$DFLT_OUTPUT_FORMAT
fi


# Refuse to run if we do not recognize the URL as something that will be
# encrypted on the wire. This is intended to help prevent accidentally
# transmitting HTTP Basic Auth credentials in cleartext.
#
re_starts_with_https='^https://'
if test -z "${gl_const_github_api_base_url}"; then
    printf "${PROG} (error): GitHub API base URL is not defined; bailing out\n" 1>&2
    exit 1
fi
if [[ "${gl_const_github_api_base_url}" =~ $re_starts_with_https ]]; then :; else
    printf "${PROG} (error): configured GitHub API base URL (\"%s\") does not start with 'https://'; bailing out\n" "${gl_const_github_api_base_url}" 1>&2
    exit 1
fi
#
re_ends_with_slash='.*[/]$'
if [[ "${gl_const_github_api_base_url}" =~ $re_ends_with_slash ]]; then :; else
    if $BE_VERBOSE; then
        printf "${PROG} (info): configured GitHub API base URL (\"%s\") does not end with a slash; appending slash character\n" "${gl_const_github_api_base_url}" 1>&2
    fi
    gl_const_github_api_base_url="${gl_const_github_api_base_url}/"
    declare -r gl_const_github_api_base_url
    if $BE_VERBOSE; then
        printf "${PROG} (info): configured GitHub API base URL (modified) is now: \"%s\"\n" "${gl_const_github_api_base_url}" 1>&2
    fi
fi
if $BE_VERBOSE; then
    printf "${PROG} (info): configured GitHub API base URL: \"%s\"\n" "${gl_const_github_api_base_url}" 1>&2
fi


re_starts_with_accept='Accept:[[:space:]]'
if test -z "${gl_const_http_accept_github_version}"; then
    printf "${PROG} (error): HTTP 'Accept:' header for GitHub API version is not defined; bailing out\n" 1>&2
    exit 1
fi
if [[ "${gl_const_http_accept_github_version}" =~ $re_starts_with_accept ]]; then :; else
    printf "${PROG} (error): configured HTTP 'Accept:' header (\"%s\") for GitHub API version does not start with 'Accept: '; bailing out\n" "${gl_const_http_accept_github_version}" 1>&2
    exit 1
fi
if $BE_VERBOSE; then
    printf "${PROG} (info): configured HTTP header for GitHub API version: \"%s\"\n" "${gl_const_http_accept_github_version}" 1>&2
fi


MY_TMP_DIR=$("${MKTEMP_PROG}" -t --directory "${PROG}.XXXXXXXX")
if test $? -ne 0; then
    printf "${PROG} (error) was unable to create temporary directory; bailing out\n" 1>&2
    exit 1
fi
#
# This should be a "can't happen" scenario, but since we do a 'rm -fr ...' on
# the value when we are done, we want to be belt-and-suspenders about it...
#
if test -z "${MY_TMP_DIR}"; then
    printf "${PROG} (error) temporary directory path is empty; bailing out\n" 1>&2
    exit 1
fi
function f_cleanup_rmfr_tmpdir () {
    local -a t_rm_opts=()
    t_rm_opts+=('-f')
    t_rm_opts+=('-r')
    if $DEBUGGING; then
        t_rm_opts+=('-v')  # verbose
    fi
    "${RM_PROG}" "${t_rm_opts[@]}" "${MY_TMP_DIR}"
    # Ignore exit status -- Is a cleanup hook, so do not exit the process if
    # 'rm' failed; keep going...
}
F_CLEANUP_HOOK_NAMES+=( 'f_cleanup_rmfr_tmpdir' )

declare -r MY_TMP_CURL_OUT_FPATH="${MY_TMP_DIR}/curl.out"


# Note that the gl_const_http_accept_github_version value is known to always
# end with a slash character.
#
MY_GITHUB_RATE_LIMIT_URL="${gl_const_github_api_base_url}rate_limit"


# Common global options for use in every 'curl' invocation. Specific
# invocations will require additional options, but such usages should not
# modify this array.
#
declare -a MY_CURL_OPTS=()

# This disables output of curl's progress meter /and/ output of error messages...
MY_CURL_OPTS+=( '--silent' )
# ...but this re-enables output of the error messages.
MY_CURL_OPTS+=( '--show-error' )


# Force use of TLS 1.2 (or later). Writing in 2016, all previous versions are
# known to be broken and susceptible to known attacks. Note that the
# '--tlsv1.2' option was added in curl 7.34.0
#
# This is absolutely essential since we're using HTTP Basic Auth (see below).
#
MY_CURL_OPTS+=( '--tlsv1.2' )

# Allow ONLY https, for both the initial request and for redirects
MY_CURL_OPTS+=( '--proto')
MY_CURL_OPTS+=( 'https')
MY_CURL_OPTS+=( '--proto-redir')
MY_CURL_OPTS+=( 'https')


# Tell curl to use HTTP Basic Authentication. This is the curl default, but
# we're explicit about what we expect (and want to avoid any surprises from
# weirdo ~/.curlrc files).
#
# See also: RFC 7617 "The 'Basic' HTTP Authentication Scheme" (2015-09)
#
MY_CURL_OPTS+=( '--basic' )


# User's authentication credentials will be obtained from the user's ~/.netrc
# file. See curl(1) and netrc(5)
#
MY_CURL_OPTS+=( '--netrc'  )

MY_CURL_OPTS+=( '--user-agent' )
MY_CURL_OPTS+=( "$PROG"        )


# Tell the GitHub service that we're trying to speak v3 of the API. Writing in
# 2016, v3 is the default, but some newer version may become the default in
# the future.
#
MY_CURL_OPTS+=( '--header' )
MY_CURL_OPTS+=( "${gl_const_http_accept_github_version}" )

# We always write the (JSON) output to a file in our temporary directory...
#
MY_CURL_OPTS+=( '--output' )
MY_CURL_OPTS+=( "${MY_TMP_CURL_OUT_FPATH}" )

# ...and write the HTTP response status to stdout. This allows for robust
# error handling. Also, we cannot really know how to interpret the output
# returned from the remote server until we have examined (at least) the HTTP
# response code.
#
MY_CURL_OPTS+=( '--write-out'  )
MY_CURL_OPTS+=( '%{http_code}' )

if $BE_VERBOSE; then
    printf "${PROG} (info): requesting /rate_limit\n" 1>&2
fi

# t_gh_json_service_response=$( "${CURL_PROG}" "${MY_CURL_OPTS[@]}" \
#                                              --get                \
#                                              "${MY_GITHUB_RATE_LIMIT_URL}" )

t_http_code=$( "${CURL_PROG}" "${MY_CURL_OPTS[@]}" \
                              --get                \
                              "${MY_GITHUB_RATE_LIMIT_URL}" )
if test $? -ne 0; then
    # Hopefully 'curl' emitted a meaningful error message, too...
    printf "${PROG} (error): was unable to obtain GitHub rate limit; bailing out\n" 1>&2
    exit 1
fi
if test -z "${t_http_code}"; then
    printf "${PROG} (error): curl(1) command succeeded, but no HTTP response code emitted; bailing out\n" 1>&2
    exit 1
fi

if $DEBUGGING; then
    printf "${PROG} (debug): GET /rate_limit: HTTP response status: %s\n" "${t_http_code}" 1>&2
fi

case ${t_http_code} in
    '200')  # "OK"
        ;;
    *)
        if test -s "${MY_TMP_CURL_OUT_FPATH}"; then
            printf "${PROG} (error): HTTP response code was: \"%s\"; expected 200 (\"OK\"); bailing out\n"\
"    HTTP response payload may contain additional info:\n        %s\n" \
                   "${t_http_code}" \
                   "$("${CAT_PROG}" "${MY_TMP_CURL_OUT_FPATH}")" 1>&2
        else
            printf "${PROG} (error): HTTP response code was: \"%s\"; expected 200 (\"OK\"); bailing out\n"\
"    (HTTP response payload was empty)\n" \
                   "${t_http_code}" 1>&2
        fi
        exit 1
        ;;
esac

t_gh_json_service_response=$(cat "${MY_TMP_CURL_OUT_FPATH}")
if test $? -ne 0; then
    printf "${PROG} (error): was unable to read JSON response from temporary file (\"%s\"); bailing out" \
           "${MY_TMP_CURL_OUT_FPATH}" 1>&2
    exit 1
fi
if test -z "${t_gh_json_service_response}"; then
    printf "${PROG} (error): JSON response is empty; bailing out\n" 1>&2
    exit 1
fi

if test "${OUTPUT_FORMAT}" = 'JSON'; then
    echo "${t_gh_json_service_response}"
    exit $?  # We're done
fi


# The json structure we're parsing looks like this:
#
#     {
#       "resources": {
#         "core": {
#           "limit": 5000,
#           "remaining": 5000,
#           "reset": 1463918358
#         },
#         "search": {
#           "limit": 30,
#           "remaining": 30,
#           "reset": 1463914818
#         }
#       },
#       "rate": {
#         "limit": 5000,
#         "remaining": 5000,
#         "reset": 1463918358
#       }
#     }
#
# Note that the top-level "rate" object is flagged as deprecated in the GitHub
# API documentation, so we operate only on the "resources" object here. Note,
# too, that we structure things so that the upstream service can add new
# resources member objects without breaking our code; we'll just report on
# whatever is found in the data.
#
#     $ jq -r '.resources | ( keys[] as $k | "\( $k ):\( .[$k].limit ):\( .[$k].remaining ):\( .[$k].reset )" )' < rate-limit.json
#     core:5000:5000:1463918358
#     search:30:30:1463914818
#
# HINT: The 'reset' date value is presented in seconds since the Unix
#       epoch. To see its human-readable value do something like this:
#
#           $ date --date='@1463918358'
#           Sun May 22 07:59:18 EDT 2016
#
#           $ date --date='@1463918358' --rfc-3339=seconds
#           2016-05-22 07:59:18-04:00
#
#           $ date --date='@1463918358' --rfc-3339=seconds --utc
#           2016-05-22 11:59:18+00:00
#
RATE_LIMIT_DATA_LINES=$(echo "${t_gh_json_service_response}"  \
                        | "${JQ_PROG}" -r '.resources | ( keys[] as $k | "\( $k ):\( .[$k].limit ):\( .[$k].remaining ):\( .[$k].reset )" )' )
if test $? -ne 0; then
    printf "${PROG} (error): was unable to extract rate limit data from GitHub service response; bailing out\n" 1>&2
    exit 1
fi


# The elements in these arrays correspond positionally (identical index values
# are part of the same output line.
declare -a FORMATTED_RESOURCE_NAMES=()
declare -a FORMATTED_LIMIT_COUNTS=()
declare -a FORMATTED_REMAINING_COUNTS=()
declare -a FORMATTED_RESET_DATES=()


# For now, we'll simply display all fields on the screen in columns whose
# widths are sized to accomodate the longest value that will be dipsplayed in
# the column. To do that we need to obtain those string length values before
# we emit the first line out output; the values here, of course, will be based
# on the values of the strings that have been formatted for ouput.
#
COL_WIDTH_RESOURCE_NAME=0
COL_WIDTH_LIMIT_COUNT=0
COL_WIDTH_REMAINING_COUNT=0
COL_WIDTH_RESET_DATE=0

while IFS=':' read -r resource_name limit_count remaining_count reset_date_from_epoch_secs; do

    : $PROG \(trace: $LINENO\): resource_name:   "${resource_name}"
    : $PROG \(trace: $LINENO\): limit_count:     "${limit_count}"
    : $PROG \(trace: $LINENO\): remaining_count: "${remaining_count}"
    : $PROG \(trace: $LINENO\): reset_date_from_epoch_secs: "${reset_date_from_epoch_secs}"

    # Sanity checking
    if test -z "${resource_name}"; then
        printf "${PROG} (BUG): 'resource_name' value is empty; bailing out\n" 1>&2
        exit 1
    fi
    if test -z "${limit_count}"; then
        printf "${PROG} (BUG): 'limit_count' value is empty; bailing out\n" 1>&2
        exit 1
    fi
    if test -z "${remaining_count}"; then
        printf "${PROG} (BUG): 'remaining_count' value is empty; bailing out\n" 1>&2
        exit 1
    fi
    if test -z "${reset_date_from_epoch_secs}"; then
        printf "${PROG} (BUG): 'reset_date_from_epoch_secs' value is empty; bailing out\n" 1>&2
        exit 1
    fi

    if [[ "${limit_count}" =~ $gl_const_re_all_digits ]]; then :; else
        printf "${PROG} (BUG): invalid value detected for 'limit_count' (\"%s\"); should be all digits; bailing out\n" "${limit_count}" 1>&2
        exit 1
    fi
    if [[ "${remaining_count}" =~ $gl_const_re_all_digits ]]; then :; else
        printf "${PROG} (BUG): invalid value detected for 'remaining_count' (\"%s\"); should be all digits; bailing out\n" "${remaining_count}" 1>&2
        exit 1
    fi

    # Resource names will just be displayed "as is"; there's no special formatting to apply
    if test ${#resource_name} -gt $COL_WIDTH_RESOURCE_NAME; then
        COL_WIDTH_RESOURCE_NAME=${#resource_name}
    fi
    FORMATTED_RESOURCE_NAMES+=( "${resource_name}" )


    if $HUMAN_READABLE_LIMIT_COUNT_MODE; then
        printf -v t_formatted_limit_count "%'d" "${limit_count}"
        if test $? -ne 0; then
            printf "${PROG} (error): [github resource: %s]: was unable to format limit count value (\"%s\"); bailing out\n" "${resource_name}" "${limit_count}" 1>&2
            exit 1
        fi
    else
        t_formatted_limit_count=${limit_count}
    fi
    if test ${#t_formatted_limit_count} -gt $COL_WIDTH_LIMIT_COUNT; then
        COL_WIDTH_LIMIT_COUNT=${#t_formatted_limit_count}
    fi
    FORMATTED_LIMIT_COUNTS+=( "${t_formatted_limit_count}" )


    if $HUMAN_READABLE_REMAINING_COUNT_MODE; then
        printf -v t_formatted_remaining_count "%'d" "${remaining_count}"
        if test $? -ne 0; then
            printf "${PROG} (error): [github resource: %s]: was unable to format remaining count value (\"%s\"); bailing out\n" "${resource_name}" "${remaining_count}" 1>&2
            exit 1
        fi
    else
        t_formatted_remaining_count=${remaining_count}
    fi
    if test ${#t_formatted_remaining_count} -gt $COL_WIDTH_REMAINING_COUNT; then
        COL_WIDTH_REMAINING_COUNT=${#t_formatted_remaining_count}
    fi
    FORMATTED_REMAINING_COUNTS+=( "${t_formatted_remaining_count}" )


    if $HUMAN_READABLE_DATE_MODE; then
# FIXME (PORTABILITY): maybe provide workarounds if 'date' from GNU coreutils is not available.
# FIXME: add option to allow user to request UTC
        declare -a t_date_options=()
        t_date_options+=( '--date=@'"${reset_date_from_epoch_secs}" )
        t_date_options+=( '--rfc-3339=seconds' )

        if $UTC_DATE_MODE; then
            t_date_options+=( '--utc' )
        fi

        t_formatted_reset_date="$(date "${t_date_options[@]}")"
        if test $? -ne 0; then
            printf "${PROG} (error): [github resource: %s]: was unable to format reset date value (\"%s\"); bailing out\n" "${resource_name}" "${reset_date_from_epoch_secs}" 1>&2
            exit 1
        fi
        unset t_date_options
    else
        # Note: Our $UTC_DATE_MODE flag is irrelevant here because the date
        #       from the Unix epoch seconds is relative to UTC by definition;
        #       the seconds count value in ${reset_date_from_epoch_secs} is
        #       already in a form relative to UTC.
        t_formatted_reset_date=${reset_date_from_epoch_secs}
    fi
    if test ${#t_formatted_reset_date} -gt $COL_WIDTH_RESET_DATE; then
        COL_WIDTH_RESET_DATE=${#t_formatted_reset_date}
    fi
    FORMATTED_RESET_DATES+=( "${t_formatted_reset_date}" )

done < <(echo "${RATE_LIMIT_DATA_LINES}")


# FIXME: Allow user to request that column headers be printed

for idx in $(eval echo "{0..$(( ${#FORMATTED_RESOURCE_NAMES[@]} - 1 ))}"); do

    printf '%*s  %*s  %*s  %*s\n' \
           "${COL_WIDTH_RESOURCE_NAME}"    "${FORMATTED_RESOURCE_NAMES[$idx]}"   \
           "${COL_WIDTH_LIMIT_COUNT}"      "${FORMATTED_LIMIT_COUNTS[$idx]}"     \
           "${COL_WIDTH_REMAINING_COUNT}"  "${FORMATTED_REMAINING_COUNTS[$idx]}" \
           "${COL_WIDTH_RESET_DATE}"       "${FORMATTED_RESET_DATES[$idx]}"
done


if $BE_VERBOSE; then
    printf "${PROG} (info): completed successfully\n" 1>&2
fi

exit 0


#
# ----------------------------------------------------------------------------
# Documentation
#
# The docs are in Perl's POD format, so you can run either the 'perldoc' or
# 'pod2man' programs on this file to produce a man page.
#
# To generate a man page for distribution (in a tarball or RPM, for instance),
# you'll probably want to run pod2man something like this:
#
#     $ pod2man /path/to/this/file \
#               --center='ads-github-tools' \
#               --release='ads-github-tools-0.3.0' \
#               --section='1' \
#               > /outputdir/ads-github-show-rate-limits.1
#
# To inspect the page formatting, etc., you can pipe the above 'pod2man'
# command to:
#
#     'man -l -'
#
# instead of redirecting the output to a file.
#
# ----------------------------------------------------------------------------

=pod

=head1 NAME

  ads-github-show-rate-limits - Show user's GitHub API rate limits


=head1 SYNOPSIS

  ads-github-show-rate-limits --help
  ads-github-show-rate-limits --version

  ads-github-show-rate-limits [OPTION...]


=head1 DESCRIPTION

The C<ads-github-show-rate-limits> program is part of the C<ads-github-tools>
project.

The C<ads-github-show-rate-limits> program requests the user's rate limit
information from GitHub and displays it on stdout.

The program makes an authenticated HTTPS 'GET' request to the GitHub API
(using L<curl(1)>) to obtain the response body that contains a JSON
representation of the service rate limit information. The rate limit
information is parsed out of the JSON and presented to the user in textual
columns. See below for ways to change the output format.

The default output (whitespace delimited columns of plain text) is suitable
for a user working interactively in a shell and for use in a Unix shell
pipeline.

The L<-O|/"-O, --output-format=WORD"> (C<--output-format=WORD>) option can be
used to request JSON output, instead.

A future version will provide options to allow the user to request output in
some other specific formats (edn, transit).

All requests are made over HTTPS.


=head2 Motivation

When working with the programs provided by the C<ads-github-tools> project (or
really any tool that makes calls to the GitHub API) you will want to be able
to confirm that you are within your rate limit and how many requests you still
have left before you hit your cap.

You may also be working on a set of similar tools and just want to confirm
that they are working as expected -- not incurring hits against your GitHub
API rate limit when you do not expect them to.


=head1 OPTIONS

Below are the command line options currently accepted by
C<ads-github-show-rate-limits>.


=over 4

=item --help

Print help usage message


=item -V, --version

Print the version of the program to stdout and then exit.


=item -h, --human-readable

Causes numbers and dates to be printed in human readable format, for example:

    "1,324,835" rather than "1324835"

and:

    "2016-05-22 07:59:18-04:00" rather than "1463918358"

By default, numbers and dates are presented in the same format as they are
returned by the upstream GitHub service; this allows downstream tools to
process them without having to parse some (typically more complicated)
human-readable formats. In their default representation, dates are shown as
seconds since the Unix epoch.

When the C<-h> (C<--human-readable>) option is is specified, then numbers will
be presented in a locale-aware format, and dates will be formatted in local
time to the second in RFC 3339 format.

To have dates presented in human readable UTC form, see the C<-u> (C<--utc> or
C<--universal>) option.


=item -O, --output-format=WORD

Allows the user to request output in a format other than the default
whitespace-separated text columns, according to WORD.

Valid values for WORD include:

=over 4

=item * text  (this is the default)

=item * json

=back

Note that the JSON output is the raw JSON output emitted by the GitHub API's
C</rate_limit> endpoint, and contains a legacy "rate" object that is
suppressed in the default C<text> output:

    $ ads-github-show-rate-limits --output-format=json | jq '.'
    {
      "resources": {
        "core": {
          "limit": 5000,
          "remaining": 5000,
          "reset": 1489366021
        },
        "search": {
          "limit": 30,
          "remaining": 30,
          "reset": 1489362481
        },
        "graphql": {
          "limit": 200,
          "remaining": 200,
          "reset": 1489366021
        }
      },
      "rate": {
        "limit": 5000,
        "remaining": 5000,
        "reset": 1489366021
      }
    }

The rationale is that somebody requesting the JSON output is likely familiar
with the GitHub API, and there is little point in creating a
close-but-different variation of it in this program. Unless a good reason is
found to depart from it, any other tree-like output formats introduced in the
future will follow this same principle.

For more info on the "rate" JSON object being legacy, see the
L<"deprecation notice"|https://developer.github.com/v3/rate_limit/> in the
GitHub API C<"/rate_limit"> documentation, from which we quote:

=over 4

The "rate" object...is deprecated and is scheduled for removal in the next
version of the API.

If you're writing new API client code (or updating your existing code), you
should use the "core" object instead of the "rate" object. The "core" object
contains the same information that is present in the "rate" object.

=back

If more than one C<-O> (C<--output-format=WORD>) option is specified on the
command line, the one specified last wins.

B<Historical note:> The C<-O> (C<--output-format=WORD>) option was introduced
in the version of C<ads-github-show-rate-limits> distributed with
C<ads-github-tools> version 0.3.0. See also L<"issue 8"|https://github.com/salewski/ads-github-tools/issues/8>


=item -u, --utc, --universal

By default dates are presented in the form in which they are returned by the
upstream GitHub API: in the number of seconds since the Unix epoch, which is
roughly defined as the number of seconds since 00:00:00 UTC on 1 January 1970.

So in that sense, the default output is I<already> in UTC format. However,
keep reading.

The epoch itself is represented as 0 (zero) seconds. Consider the following:

    $ date --date=@0 --utc --rfc-3339=seconds
    1970-01-01 00:00:00+00:00

    $ date --date=@300 --utc --rfc-3339=seconds
    1970-01-01 00:05:00+00:00

    $ date --date=@307 --utc --rfc-3339=seconds
    1970-01-01 00:05:07+00:00

    $ date --date=@-180 --utc --rfc-3339=seconds
    1969-12-31 23:57:00+00:00

On the author's machine, the current time, represented in seconds since the
Unix epoch, is:

    $ date '+%s'
    1489335551

As noted, the default output of C<ads-github-show-rate-limits> displays the
date values in that same format. For example:

    $ ads-github-show-rate-limits
       core  5000  5000  1489339313
    graphql   200   200  1489339313
     search    30    30  1489335773

Such values are less than human-friendly (for most humans ;-), so we also
provide the L<-h|/"-h, --human-readable"> (C<--human-readable>) option. That
has the effect of displaying the dates in a form that is more readable by most
folks both due to the format and the locale-specific "local time"
representation:

    ads-github-show-rate-limits --human-readable
       core  5,000  5,000  2017-03-12 13:23:12-04:00
    graphql    200    200  2017-03-12 13:23:12-04:00
     search     30     30  2017-03-12 12:24:12-04:00

The C<-u> (C<--utc> or C<--universal>) option allows the user to request that
the dates I<not> be converted to the user's local time, but to have them
displayed in UTC, instead:

    $ ads-github-show-rate-limits --human-readable --utc
       core  5,000  5,000  2017-03-12 17:25:05+00:00
    graphql    200    200  2017-03-12 17:25:05+00:00
     search     30     30  2017-03-12 16:26:05+00:00

Two things to note about the above:

=over 4

=item 1. The date is still in RFC 3339 format

=item 2. The non-date fields are also in "human readable" form.

=back

Regarding the second item, you can achieve a similar effect for the date
fields while leaving the non-date fields in their default (non-human-readable)
representation by omitting the L<-h|/"-h, --human-readable">
(C<--human-readable>) option:

    $ ads-github-show-rate-limits --utc
       core  5000  5000  2017-03-12 17:25:05+00:00
    graphql   200   200  2017-03-12 17:25:05+00:00
     search    30    30  2017-03-12 16:26:05+00:00

The above example demonstrates that the C<-u> (C<--utc> or C<--universal>)
option, when specified I<without> the L<-h|/"-h, --human-readable">
(C<--human-readable>) option, means "human readable UTC output for date fields
only".

B<Design note:> Two long-form aliases, C<--utc> and C<--universal>, are
provided for alignment with the similarly named options of the GNU L<date(1)>
program.

B<Historical note:> The C<-u> (C<--utc> or C<--universal>) option was
introduced in the version of C<ads-github-show-rate-limits> distributed with
C<ads-github-tools> version 0.3.0. See also L<"issue
6"|https://github.com/salewski/ads-github-tools/issues/6>


=item -v, --verbose

Turn on verbose mode. Causes program to emit messages on C<stderr> indicating
what it is doing. The option may be specified multiple times to increase
fruther the level of verbosity. One C<-v> option enables info-level output;
two such opts enable debug-level output; three or more enable trace-level
output.


=item --

Signals the end of options and disables further options processing.

=back


=head1 DIAGNOSTICS

Exits with zero on success, non-zero on error.


=head1 BUGS

=over 4

=item Probably tons

If you find any, please report them as described in the C<BUGS> file.

=back


=head1 SEE ALSO

=over 4

=item * L<ads-github-tools(7)>
  

=item * Wikipedia "Unix time" page

For information about the Unix epoch:

L<https://en.wikipedia.org/wiki/Unix_time>


=item * L<date(1)>

The C<-u> (C<--utc> and C<--universal>) option in
C<ads-github-show-rate-limits> is named after the identically named options of
the GNU C<date(1)> program.


=item * L<jq(1)>

The C<jq> program is referenced in examples above. It is a command line tool
for transforming JSON in various ways. On Debian (and Debian-derived) systems,
it is available in the C<jq> package. The upstream website for the tool is here:

=over 4

=item *

L<https://stedolan.github.io/jq/>

=back

and the source of the tool is available on GitHub here:

=over 4

=item *

L<https://github.com/stedolan/jq>

=back


=back


=head1 AUTHOR

=over 4

=item Alan D. Salewski  <ads@salewski.email>

=back


=head1 COPYRIGHT

Copyright 2016, 2017, 2020 Alan D. Salewski

=cut


# Local Variables:
#     mode: sh
#     eval: (sh-set-shell "bash" t nil)
# End:
