#! @BASH_SH@ -
# @configure_input@

# SPDX-FileCopyrightText: <text>
#     Copyright (c) 2022 Alan D. Salewski <ads@salewski.email>
#     Copyright (c) 2014,2016 Karlson2k (Evgeny Grin) <k2k@narod.ru>
#     Copyright (c) 2012 Brian Aker <brian@tangent.org>
#     Copyright (c) 2008 Michael Paul Bailey <jinxidoru@byu.net>
#     Copyright (c) 2008 Christophe Tournayre <turn3r@users.sourceforge.net>
# </text>
# SPDX-License-Identifier: FSFAP
#
# LICENSE
#
#   Copying and distribution of this file, with or without modification, are
#   permitted in any medium without royalty provided the copyright notice
#   and this notice are preserved. This file is offered as-is, without any
#   warranty.
#
#
# ads-github-nproc.in: Prints on stdout the number of CPUs available to the
# current process.
#
# This program is intended to work similarly to the nproc(1) program from the
# GNU 'coreutils' package, but can be used on hosts where 'nproc' may not be
# available.
#
#
# Motivation:
# -----------
# The 'ads-github-tools' programs need to be able to tell how many CPUs are
# available (in order to control concurrency operations, and similar). This
# program provides that capability with an in-tree solution that can work in a
# reasonably portable way.
#
#
# History:
# --------
# The core functionality of the 'ads-githbu-nproc' program is derived from the
# 'AX_COUNT_CPUS' autotools macro (from version "serial 22"; see the section
# "Serial Numbers" in the Automake manual[0]) defined in the
# 'm4/ax_count_cpus.m4' file of the GNU Autoconf Archive[1][2]. The specific
# Git commit from the autoconf-archive project from which the current program
# is derived is:
#
#     commit 3d94a4e4b9bb8eb78e2a68be53b990a165f83512
#
# The original 'AX_COUNT_CPUS' Autoconf macro identifies the number of CPUs
# available to the current process at configure-time. This 'ads-github-nproc'
# program uses the same algorithm and approach as the 'AX_COUNT_CPUS' macro,
# but (by virtual of being a Bash script) allows for use at runtime.
#
# Readers will note that this file is under a different license than the rest
# of the 'ads-github-tools' project; this file maintains the original license
# from the 'm4/ax_count_cpus.m4' file from which it is derived. The original
# license is GPL-compatible, but is not the GPL-2.0-or-later license used by
# (most of) the 'ads-github-tools' package. The license for this file is what
# is known by SPDX as the "FSF All Permissive License" (FSFAP)[3], which is
# the license recommended[4] by the GNU project for use for Autoconf
# macros. The original copyright statement is included here, and augmented
# with additional copyright information by the author of the
# 'ads-github-nproc' program.
#
#
# [0] https://www.gnu.org/software/automake/manual/automake.html#Serials
#
# [1] https://savannah.gnu.org/projects/autoconf-archive
#
# [2] git clone https://git.savannah.gnu.org/git/autoconf-archive.git
#
# [3] https://spdx.org/licenses/FSFAP.html
#
# [4] https://www.gnu.org/prep/maintain/html_node/License-Notices-for-Other-Files.html
# 
declare -r PROG='ads-github-nproc.in'

declare -r COPYRIGHT_DATES='2022'

# declare -r MAINTAINER='@DFLT_MAINTAINER_FULL@'
declare -r MAINTAINER='@PACKAGE_BUGREPORT@'  # value filtered-in at build time

declare -r VERSION='@VERSION@'  # value filtered-in at build time

declare -r gl_const_build_date='@BUILD_DATE@'  # value filtered-in at build time
declare -r gl_const_release="${VERSION}  (built: ${gl_const_build_date})"
# declare -r gl_const_release="${VERSION}"


# Note that we use an "application" $TRACING flag separate from bash's
# built-in 'xtrace' (set -x) shell option. This allows us to have a general
# notion of user-requested verbosity separate from any selectively placed
# 'set -x/set +x' sections we may plug into the code while working on the
# program itself; similarly for places where we might want to avoid trace
# output while debugging by selectively placing 'set +x/set -x' sections; both
# of those behaviors would be much more cumbersome to achieve if we just
# checked for 'x' in $- at runtime.
#
BE_VERBOSE=false   # enable with one '-v' (--verbose) opt
DEBUGGING=false    # enable with two '-v' (--verbose) opts
TRACING=false      # enable with three or more '-v' (--verbose) opts

RE_BLANK='^[[:space:]]*$'
#RE_EMPTY='^$'

MY_HOST_OS="@host_os@"  # filtered-in here at build time

# This may be something like '/path/to/grep -E', so callers should not assume
# it should be treated as a single string token.
#
EGREP="${EGREP:-@EGREP@}"  # filtered-in here at build time

# By default we'll use the external programs found at configure-time (values
# are filtered-in here at build time). But we allow the user to override any
# particular tool by setting an environment variable named after the tool
# (with hyphen chars changed to underscores).
#
# Programs that are considered optional at configure time are paired here with
# a 'HAVE_foo' flag, which is checked (at runtime) before attempting to use
# the tool. Writing in 2022, there is no universally agreed-upon way to query
# the system for the number of CPUs, though some mechanisms for doing so are
# widely used; hence our need to be flexible at runtime.
#
HAVE_GETCONF_PROG=@HAVE_GETCONF_PROG@
GETCONF_PROG="${GETCONF:-@GETCONF_PROG@}"
#
HAVE_LSCPU_PROG=@HAVE_LSCPU_PROG@
LSCPU_PROG="${LSCPU:-@LSCPU_PROG@}"
#
HAVE_NPROC_PROG=@HAVE_NPROC_PROG@
NPROC_PROG="${NPROC:-@NPROC_PROG@}"
#
HAVE_SYSCTL_PROG=@HAVE_SYSCTL_PROG@
SYSCTL_PROG="${SYSCTL:-@SYSCTL_PROG@}"


declare -a F_CLEANUP_HOOK_NAMES=()

function f_add_cleanup_hook_name () {
    F_CLEANUP_HOOK_NAMES+=( $1 );
}


function f_cleanup () {

    if test ${#F_CLEANUP_HOOK_NAMES[@]} -eq 0; then
        # No cleanup hooks, so nothing to do
        return
    fi

    local cleanup_hook
    local idx

    let idx=${#F_CLEANUP_HOOK_NAMES[@]}-1

    # Note that we're running the cleanup hooks in opposite order from which
    # they were installed.
    #
    while test $idx -ge 0; do

        cleanup_hook=${F_CLEANUP_HOOK_NAMES[$idx]}

        if $DEBUGGING; then
            printf "${PROG} (debug): running cleanup hook: [%s]\n" "${cleanup_hook}" 1>&2
        fi

        test -n "$cleanup_hook" && eval "$cleanup_hook"

        let idx=$idx-1
    done
}

function f_cleanup_and_die () {
    f_cleanup
    exit 1
}

trap 'printf "$PROG (warn): HUP signal caught; bailing out\n"  1>&2; f_cleanup_and_die' HUP
trap 'printf "$PROG (warn): INT signal caught; bailing out\n"  1>&2; f_cleanup_and_die' INT
trap 'printf "$PROG (warn): QUIT signal caught; bailing out\n" 1>&2; f_cleanup_and_die' QUIT
trap 'printf "$PROG (warn): TERM signal caught; bailing out\n" 1>&2; f_cleanup_and_die' TERM

trap 'f_cleanup' EXIT



f_print_help () {

    cat <<EOF
usage: ${PROG} { -h | --help }
  or:  ${PROG} { -V | --version }
  or:  ${PROG} [OPTION...] [--]

Prints on stdout the number of CPUs available to the current process.

  -h, --help     Print this help message on stdout
  -V, --version  Print the version of the program on stdout
  -v, --verbose  Print program progress messages on stderr. Specify multiple
                   times to increase verbosity: info, debug, and tracing (set -x)
      --         Signals the end of options and disables further options processing. Any
                   remaining arguments will cause program to exit with an error

Report bugs to $MAINTAINER.
EOF
}

f_print_version () {
    cat <<EOF
${PROG} ${gl_const_release}

Copyright (C) ${COPYRIGHT_DATES} Alan D. Salewski <ads@salewski.email>
Copyright (c) 2014,2016 Karlson2k (Evgeny Grin) <k2k@narod.ru>
Copyright (c) 2012 Brian Aker <brian@tangent.org>
Copyright (c) 2008 Michael Paul Bailey <jinxidoru@byu.net>
Copyright (c) 2008 Christophe Tournayre <turn3r@users.sourceforge.net>

License FSFAP: FSF All Permissive License <https://spdx.org/licenses/FSFAP.html>.

Copying and distribution of this file, with or without modification, are
permitted in any medium without royalty provided the copyright notice
and this notice are preserved. This file is offered as-is, without any
warranty.

This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Original Autoconf-archive macro AX_COUNT_CPUS by Christophe Tournayre,
Michael Paul Bailey, Brian Aker, and Karlson2k (Evgeny Grin).

Adapted to stand-alone 'ads-github-nproc' program by Alan D. Salewski.
EOF
}


pos_last_plus_one=$(( $# + 1 ))

# Each value is one or zero, which indicates whether or not the option is
# expected to have an argument.
#
declare -A longopt_spec=(
    ['help']=0      # -h
    ['version']=0   # -V

    ['verbose']=0   # -v
)

# internal sanity check
for one_key in "${!longopt_spec[@]}"; do
    one_val=${longopt_spec[${one_key}]}
    if [[ $one_val =~ ^[01]$ ]]; then :; else
        printf "${PROG} (BUG) [line $LINENO]: value (%s) for longopt key '%s' must be either 0 or 1; bailing out\n" \
               "${one_val}" "${one_key}" 1>&2
        exit 1
    fi
done

if test $# -gt 0; then

    # Using getopts in "silent mode". Note that adding '-' to the optstring allows us to
    # process GNU-style long-form options; that option is specified to take an argument to
    # cause getopts to place whatever follows the second '-' character into OPTARG.
    #
    # Note that getopts will automatically stop processsing options upon encountering
    # '--', but we still need to deal with the pathological form --=BLAH (no option name,
    # just a value using the equals-sign syntax).
    #
    while getopts ':-:hVv' opt
    do
        : $PROG \(trace: $LINENO\): opt is: $opt

        if test "${opt}" = '-'; then

            # Intercepting processing of long-form option. This conditional
            # block will set up the 'opt', 'OPTARG', and 'OPTIND' variables for
            # the code that follows, just as if getopts had the capability to
            # process long-form options.

            # OPTARG here is one of:
            #
            #     =BLAH    (which means user specified '--=BLAH')
            # or:
            #     foo
            # or:
            #     foo=FOOVAL

            if [[ ${OPTARG} =~ .*=.* ]]; then

                : $PROG \(trace: $LINENO\): OPTARG is name=value style

                # Keep everything up to the first '=' sign. Note that if the
                # option was specified as: --foo=FOOVAL, then $opt here will be
                # 'foo' (no hyphen chars).
                opt=${OPTARG/=*/}
                : $PROG \(trace: $LINENO\): opt is: $opt

                : $PROG \(trace: $LINENO\): a long option name must be at least two characters in length
                if test ${#opt} -le 1; then
                    printf "${PROG} (error): invalid long option '--%s'; bailing out\n" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                t_exists=false
                for one_key in "${!longopt_spec[@]}"; do
                    if test "${opt}" = "${one_key}"; then
                        t_exists=true
                        break
                    fi
                done

                : $PROG \(trace: $LINENO\): a long option name must be one that the program is expecting
                if $t_exists; then :; else
                    # Note that we need to restore the leading '-' chars
                    printf "${PROG} (error): unrecognized long option '--%s'; bailing out\n" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                # Since we know the option was specified in --foo=BAR form, the
                # option was specified erroneously unless the option's long-form
                # spec indicates that it can accept an argument.
                #
                if test ${longopt_spec[${opt}]} -ne 1; then
                    printf "${PROG} (error): option '--%s' does not take an argument; bailing out\n" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                OPTARG=${OPTARG#*=}  # keep everything after the first '=' sign
                : $PROG \(trace: $LINENO\): OPTARG is: $OPTARG

                # All of our command line options that accept arguments
                # require the values for those arguments to be non-empty
                # strings.
                if [[ "${OPTARG}" =~ $RE_BLANK ]]; then
                    printf "${PROG} (error): argument for option '--%s' may not be blank; bailing out\n" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

            else
                : $PROG \(trace: $LINENO\): OPTARG is name-only style

                opt="$OPTARG"
                : $PROG \(trace: $LINENO\): opt is: $opt

                if test -z "${opt}"; then

                    # This should be a "can't happen" scenario; since bash's 'getopts'
                    # implementation should directly handle the magic '--' token, we
                    # should never fall through here.

                    printf "${PROG} (BUG) [line $LINENO]: received empty OPTARG, which means getopts did not handle the stand-alone '--' token; bailing out\n" 1>&2
                    exit 1
                fi

                : $PROG \(trace: $LINENO\): a non-empty long option name must be at least two characters in length
                if test ${#opt} -lt 2; then
                    printf "${PROG} (error): invalid long option '--%s'; bailing out\n" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                t_exists=false
                for one_key in "${!longopt_spec[@]}"; do
                    if test "${opt}" = "${one_key}"; then
                        t_exists=true
                        break
                    fi
                done

                : $PROG \(trace: $LINENO\): a long option name must be one that the program is expecting
                if $t_exists; then :; else
                    printf "${PROG} (error): unrecognized long option '--%s'; bailing out\n" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                # We know the option was specified in one of the following forms:
                #
                #     --foo
                # or:
                #     --foo FOOVAL
                #
                # The option's long-form spec will tell us whether or not an argument is
                # expected for the option.
                #
                if test ${longopt_spec[${opt}]} -eq 1; then

                    # If bumping OPTIND would put us more than one beyond the "last pos
                    # plus one", then there is no argument provided at position OPTIND for
                    # us to consume.
                    #
                    if (( $(( $OPTIND + 1 )) > pos_last_plus_one )); then

                        printf "${PROG} (error): missing argument for option --${OPTARG}\n" 1>&2
                        f_print_help 1>&2
                        exit 1
                    fi

                    OPTARG=${@:${OPTIND}:1}
                    (( ++OPTIND ))
                    : $PROG \(trace: $LINENO\): manually incremented OPTIND to: $OPTIND

                    # All of our command line options that accept arguments
                    # require the values for those arguments to be non-empty
                    # strings.
                    if [[ "${OPTARG}" =~ $RE_BLANK ]]; then
                        printf "${PROG} (error): argument for option '--%s' may not be blank; bailing out\n" "${opt}" 1>&2
                        f_print_help 1>&2
                        exit 1
                    fi
                fi
            fi
        fi

        : $PROG \(trace: $LINENO\): opt is: $opt
        : $PROG \(trace: $LINENO\): OPTARG is: $OPTARG
        : $PROG \(trace: $LINENO\): OPTIND is: $OPTIND

        # Normal getopts style processing happens beneath here, with the slight
        # twist that 'opt' may contain a long-form option name.

        case $opt in

            'help' | 'h' )
                # print help message
                f_print_help
                exit 0
                ;;


            'version' | 'V' )
                # print program version info
                f_print_version
                exit 0
                ;;


            'verbose' | 'v' )
                # Accumulating 'verbose' opt. A single -v opt simply turns
                # BE_VERBOSE on (enables (additional) info-level messages). Two -v
                # opts turns on $DEBUGGING, which additionally enables debug-level
                # messages. Three or more '-v' opts turns $TRACING on. Note that
                # if you intend to turn tracing on, you'll probably want your -v
                # opts to be the first opts on the command line (so they take
                # effect earlier).
                if $BE_VERBOSE; then

                    if $DEBUGGING; then

                        # We've seen at least two -v opt before, so now we're
                        # turning tracing on.

                        if $TRACING; then
                            : $PROG \(trace: $LINENO\): tracing already enabled
                        else
                            # See comments at the decl spot for $TRACING
                            # pertaining to why we maintain an "application"
                            # $TRACING flag separate from bash's built-in 'xtrace'
                            # (set -x) shell option.

                            # Enable tracking before setting our app-level
                            # $TRACING flag so that setting it is the first thing
                            # that appears in the trace.
                            set -x
                            TRACING=true
                        fi
                    else
                        # Second -v opt we're seeing
                        DEBUGGING=true
                        # Just to give a warm and fuzzy...
                        printf "${PROG} (debug): debug-level output enabled\n" 1>&2
                    fi
                else
                    # First -v opt we're seeing
                    BE_VERBOSE=true
                fi
                ;;



            ':')  # getopts put : in opt
                  # Note that we need to restore the leading '-' that getopts
                  # has sliced off.
                  printf "${PROG} (error): missing argument for option -${OPTARG}\n" 1>&2
                  f_print_help 1>&2
                  exit 1
                  ;;

            '?')  # getopts put ? in opt
                  # Unrecognized option; note that we need to restore the leading '-' that
                  # getopts has sliced off.
                  printf "${PROG} (error): unrecognized option '-%s'; bailing out\n" "${OPTARG}" 1>&2
                  f_print_help 1>&2
                  exit 1
                  ;;

            * )   printf "${PROG} (BUG) [line $LINENO]: unhandled option case; opt: '$opt',  OPTARG: '$OPTARG'\n" 1>&2
                  exit 1
                  ;;

        esac
    done
fi

# shift off all arguments already handled
let ii=1;  # shell OPTIND index starts at 1
while (( ii < ${OPTIND} )); do
    shift
    (( ++ii ))
    : $PROG \(trace: $LINENO\): ii is now: $ii
done

# Any remaining arguments probably indicate user error, so complain loudly
# about them (do not ignore them silently).
#
if test $# -gt 0; then
    printf "${PROG} (error): unrecognized arguments (%s); bailing out\n\n" "$*" 1>&2
    exit 1
fi


# main

if $BE_VERBOSE; then
    printf "${PROG} (info): checking the number of available CPUs\n" 1>&2
fi

CPU_COUNT="0"

# Try generic methods

# 'getconf' is POSIX utility, but '_NPROCESSORS_ONLN' and 'NPROCESSORS_ONLN'
# are platform-specific
$HAVE_GETCONF_PROG \
&& command -v "${GETCONF_PROG}" >/dev/null 2>&1 \
&& CPU_COUNT=$(   "${GETCONF_PROG}" '_NPROCESSORS_ONLN' 2>/dev/null \
                   || "${GETCONF_PROG}"  'NPROCESSORS_ONLN' 2>/dev/null ) \
|| CPU_COUNT="0"

if test "$CPU_COUNT" -gt "0" 2>/dev/null \
|| ! $HAVE_NPROC_PROG                    \
|| ! command -v "${NPROC_PROG}" >/dev/null 2>&1; then
    : # empty
else
    # 'nproc' is part of GNU Coreutils and is widely available
    #
    # On the impact of the OMP_NUM_THREADS env var on 'nproc', see:
    #     https://www.gnu.org/software/coreutils/manual/html_node/nproc-invocation.html#nproc-invocation
    #     https://github.com/HenrikBengtsson/future/discussions/519#discussioncomment-918196
    #
    CPU_COUNT=$(OMP_NUM_THREADS='' "${NPROC_PROG}" 2>/dev/null) \
    || CPU_COUNT=$("${NPROC_PROG}" 2>/dev/null)                 \
    || CPU_COUNT="0"

fi

if test "$CPU_COUNT" -gt "0" 2>/dev/null; then
    : # empty
else
    # Try platform-specific preferred methods
    case $MY_HOST_OS in #(
        *linux*)
                $HAVE_LSCPU_PROG \
                && CPU_COUNT=$("${LSCPU_PROG}" -p 2>/dev/null | ${EGREP} -e '^[0-9]+,' -c) \
                || CPU_COUNT="0"
                ;; #(

        *darwin*)
                $HAVE_SYSCTL_PROG \
                && CPU_COUNT=$("${SYSCTL_PROG}" -n 'hw.logicalcpu' 2>/dev/null) \
                || CPU_COUNT="0"
                ;; #(

        freebsd*)
                $HAVE_SYSCTL_PROG \
                && command -v "${SYSCTL_PROG}" >/dev/null 2>&1 \
                && CPU_COUNT=$("${SYSCTL_PROG}" -n 'kern.smp.cpus' 2>/dev/null) \
                || CPU_COUNT="0"
                ;; #(

        netbsd*)
                $HAVE_SYSCTL_PROG \
                && command -v "${SYSCTL_PROG}" >/dev/null 2>&1 \
                && CPU_COUNT=$("${SYSCTL_PROG}" -n 'hw.ncpuonline' 2>/dev/null) \
                || CPU_COUNT="0"
                ;; #(

        solaris*)
                command -v psrinfo >/dev/null 2>&1 \
                && CPU_COUNT=$(psrinfo 2>/dev/null | ${EGREP} -e '^[0-9].*on-line' -c 2>/dev/null) \
                || CPU_COUNT="0"
                ;; #(

        mingw*)
                CPU_COUNT=$(ls -qpU1 /proc/registry/HKEY_LOCAL_MACHINE/HARDWARE/DESCRIPTION/System/CentralProcessor/ 2>/dev/null | ${EGREP} -e '^[0-9]+/' -c) \
                || CPU_COUNT="0"
                ;; #(

        msys*)
                CPU_COUNT=$(ls -qpU1 /proc/registry/HKEY_LOCAL_MACHINE/HARDWARE/DESCRIPTION/System/CentralProcessor/ 2>/dev/null | ${EGREP} -e '^[0-9]+/' -c) \
                || CPU_COUNT="0"
                ;; #(

        cygwin*) :
                CPU_COUNT=$(ls -qpU1 /proc/registry/HKEY_LOCAL_MACHINE/HARDWARE/DESCRIPTION/System/CentralProcessor/ 2>/dev/null | ${EGREP} -e '^[0-9]+/' -c) \
                || CPU_COUNT="0"
                ;; #(

        *)
                :
                ;;
    esac
fi

if test "$CPU_COUNT" -gt "0" 2>/dev/null \
|| ! command -v "${SYSCTL_PROG}" >/dev/null 2>&1; then
    : # empty
else
    # Try less preferred generic method
    # 'hw.ncpu' exist on many platforms, but not on GNU/Linux
    CPU_COUNT=$("${SYSCTL_PROG}" -n 'hw.ncpu' 2>/dev/null) \
    || CPU_COUNT="0"
fi

if test "$CPU_COUNT" -gt "0" 2>/dev/null; then
    : # empty
else
    # Try platform-specific fallback methods
    # They can be less accurate and slower then preferred methods
    case $host_os in #(
        *linux*)
                CPU_COUNT=$(${EGREP} -e '^processor' -c /proc/cpuinfo 2>/dev/null) \
                || CPU_COUNT="0"
                ;; #(

        *darwin*)
                CPU_COUNT=$(system_profiler SPHardwareDataType 2>/dev/null \
                            | ${EGREP} -i -e 'number of cores:'     \
                            | cut -d : -f 2 -s \
                            | tr -d ' ') \
                || CPU_COUNT="0"
                ;; #(

        freebsd*)
                CPU_COUNT=$(dmesg 2>/dev/null | ${EGREP} -e '^cpu[0-9]+: ' \
                            | sort -u \
                            | ${EGREP} -e '^' -c) \
                || CPU_COUNT="0"
                ;; #(

        netbsd*)
                CPU_COUNT=$(command -v cpuctl >/dev/null 2>&1 && cpuctl list 2>/dev/null \
                            | ${EGREP} -e '^[0-9]+ .* online ' -c) \
                || \
                CPU_COUNT=$(dmesg 2>/dev/null \
                            | ${EGREP} -e '^cpu[0-9]+ at' \
                            | sort -u \
                            | ${EGREP} -e '^' -c) \
                || CPU_COUNT="0"
                ;; #(

        solaris*)
                command -v kstat >/dev/null 2>&1 \
                && CPU_COUNT=$(kstat -m cpu_info -s state -p 2>/dev/null | ${EGREP} -c -e 'on-line') \
                || \
                   CPU_COUNT=$(kstat -m cpu_info 2>/dev/null | ${EGREP} -c -e 'module: cpu_info') \
                || CPU_COUNT="0"
                ;; #(

        mingw*)
                if CPU_COUNT=$(reg query 'HKLM\\Hardware\\Description\\System\\CentralProcessor' 2>/dev/null \
                               | ${EGREP} -e '\\\\[0-9]+$' -c); then
                    : # empty
                else
                    test "$NUMBER_OF_PROCESSORS" -gt "0" 2>/dev/null && CPU_COUNT="$NUMBER_OF_PROCESSORS"
                fi
                ;; #(

        msys*)
                test "$NUMBER_OF_PROCESSORS" -gt "0" 2>/dev/null && CPU_COUNT="$NUMBER_OF_PROCESSORS"
                ;; #(

        cygwin*)
                test "$NUMBER_OF_PROCESSORS" -gt "0" 2>/dev/null && CPU_COUNT="$NUMBER_OF_PROCESSORS"
                ;; #(

        *) :
               ;;
    esac
fi

if test "x$CPU_COUNT" != "x0" \
&& test "$CPU_COUNT" -gt 0 2>/dev/null; then :; else
    printf "${PROG} (warning): unable to detect available CPU(s) count; assuming 1\n" 1>&2
    CPU_COUNT="1"
fi

printf '%s\n' "${CPU_COUNT}"

exit 0


#
# ----------------------------------------------------------------------------
# Documentation
#
# The docs are in Perl's POD format, so you can run either the 'perldoc' or
# 'pod2man' programs on this file to produce a man page.
#
# To generate a man page for distribution (in a tarball or RPM, for instance),
# you'll probably want to run pod2man something like this:
#
#     $ pod2man /path/to/this/file \
#               --center='ads-github-tools' \
#               --release='ads-github-tools-0.3.1' \
#               --section='1' \
#               > /outputdir/ads-github-nproc.1
#
# To inspect the page formatting, etc., you can pipe the above 'pod2man'
# command to:
#
#     'man -l -'
#
# instead of redirecting the output to a file.
#
# ----------------------------------------------------------------------------

=pod

=encoding utf8

=head1 NAME

  ads-github-nproc - Prints the number of CPUs available to the current process.


=head1 SYNOPSIS

  ads-github-nproc (-h | --help)
  ads-github-nproc (-V | --version)
  ads-github-nproc [(-v | --verbose)...] [--]


=head1 DESCRIPTION

The C<ads-github-nproc> utility is part of the C<ads-github-tools> project.

The C<ads-github-nproc> program is intended to work similarly to the
C<nproc(1)> program from the GNU C<coreutils> package, but can be used on
hosts where C<nproc> may not be available.


=head2 Motivation

The C<ads-github-tools> programs need to be able to tell how many CPUs are
available (in order to control concurrency operations, and similar). This
program provides that capability with an in-tree solution that can work in a
reasonably portable way.


=head1 OPTIONS

The options are as follows:

=over 4

=item -h, --help

Print help usage message


=item -V, --version

Print the version of the program to stdout and then exit.


=item -v, --verbose

Turn on verbose mode. Causes program to emit messages on C<stderr> indicating
what it is doing. The option may be specified multiple times to increase
further the level of verbosity. One C<-v> option enables info-level output;
two such opts enable debug-level output; three or more enable trace-level
output.


=item --

Signals the end of options and disables further options processing.

=back


=head1 EXIT STATUS

Exits with zero on success, non-zero on error.


=head1 EXAMPLES

=head2 Example: basic usage.

This example shows the output on a host that has a 12-core processor:

    $ ads-github-nproc
    12


=head1 FAQ

Frequently Asked Questions (with answers!)

=over 4

=item *

B<Q:> Why not just use nproc(1) from the GNU coreutils?

B<A:> A combination of three reasons:

=over 4

=item 1.

Avoid adding yet another build-time dependency to the C<ads-github-tools> project.

Requiring users to install the GNU coreutils just for the purpose of detecting
the number of CPUs seemed like an overly-big ask.

=item 2.

Writing in 2022, there is no standardized way for programs to determine the
number of CPUs available to them. There is much variation across platforms
(and in some cases even within a given platform) for how to accomplish the
task. A combination of approaches would be needed, anyway.

=item 3.

There was an existing example of how to perform the task from a shell script
in the GNU Autotools Archive project, in the form of the C<AX_COUNT_CPUS>
Autoconf macro. Since that code was released under a license that is
compatible with the GPL, it was adapted from a configure-time operation to a
runtime operation in the C<ads-github-nproc> program.

=back

=back


=head1 SEE ALSO

=over 4

=item * L<getconf(1)>

Look for documentation on C<_NPROCESSORS_ONLN> and/or C<NPROCESSORS_ONLN>.
Although C<getconf(1)> is a POSIX/SUS utility, those system variable names are
not standardized.

=item * L<getconf(1posix)>

=item * L<lscpu(1)>

The C<lscpu> program comes from the C<util-linux> package.

L<https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/>

L<https://git.kernel.org/pub/scm/utils/util-linux/util-linux.git>

L<https://github.com/util-linux/util-linux>


=item * L<nproc(1)>

 L<https://www.gnu.org/software/coreutils/nproc>

=item * L<psrinfo(8)>

On Solaris.

=item * L<sysctl(8)>

Different platforms provide different parameter names for the number of
CPUs. A non-exhaustive list for relevant names includes:

    hw.logicalcpu  (On Darwin)

    kern.smp.cpus  (On FreeBSD)

    hw.ncpuonline  (On NetBSD)

=back


=head1 HISTORY

The C<ads-github-nproc> program first appeared in C<ads-github-tools-0.3.4>,
which was released in October 2022.

The core functionality of the C<ads-githbu-nproc> program is derived from the
C<AX_COUNT_CPUS> autotools macro (from version "serial 22"; see the section
"Serial Numbers" in the Automake manual[0]) defined in the
C<m4/ax_count_cpus.m4> file of the GNU Autoconf Archive[1][2]. The specific
Git commit from the autoconf-archive project from which the
C<ads-github-nproc> program is derived is:

    commit 3d94a4e4b9bb8eb78e2a68be53b990a165f83512

The original C<AX_COUNT_CPUS> Autoconf macro identifies the number of CPUs
available to the current process at configure-time. The C<ads-github-nproc>
program uses the same algorithm and approach as the C<AX_COUNT_CPUS> macro,
but (by virtual of being a stand-alone Bash script) allows for use at runtime
by the other programs in the C<ads-github-tools> project.

Note that the source code file for C<ads-github-nproc> is under a different
license than the rest of the C<ads-github-tools> project. The
C<ads-github-nproc> file maintains the original license from the
C<m4/ax_count_cpus.m4> file from which it is derived. The original license is
GPL-compatible, but is not the GPL-2.0-or-later license used by (most of) the
C<ads-github-tools> package. The license for C<ads-github-nproc> is what is
known by SPDX as the "FSF All Permissive License" (FSFAP)[3], which is the
license recommended[4] by the GNU project for use for Autoconf macros.

Furthermore, the original copyright statement is included here (and in the
program itself), and augmented with additional copyright information by the
author of the C<ads-github-nproc> program.

 [0] https://www.gnu.org/software/automake/manual/automake.html#Serials

 [1] https://savannah.gnu.org/projects/autoconf-archive

 [2] git clone https://git.savannah.gnu.org/git/autoconf-archive.git

 [3] https://spdx.org/licenses/FSFAP.html

 [4] https://www.gnu.org/prep/maintain/html_node/License-Notices-for-Other-Files.html


=head1 AUTHOR

Original Autoconf-archive macro AX_COUNT_CPUS by Christophe Tournayre,
Michael Paul Bailey, Brian Aker, and Karlson2k (Evgeny Grin).

Adapted to stand-alone C<ads-github-nproc> program by Alan D. Salewski.


=head1 BUGS

Probably tons. If you find any, please report them as described in the C<BUGS>
file.


=head1 COPYRIGHT

Copyright (C) 2022 Alan D. Salewski <ads@salewski.email>
Copyright (c) 2014,2016 Karlson2k (Evgeny Grin) <k2k@narod.ru>
Copyright (c) 2012 Brian Aker <brian@tangent.org>
Copyright (c) 2008 Michael Paul Bailey <jinxidoru@byu.net>
Copyright (c) 2008 Christophe Tournayre <turn3r@users.sourceforge.net>

License FSFAP: FSF All Permissive License <https://spdx.org/licenses/FSFAP.html>.

Copying and distribution of this file, with or without modification, are
permitted in any medium without royalty provided the copyright notice
and this notice are preserved. This file is offered as-is, without any
warranty.

This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

=cut


# Local Variables:
#     mode: sh
#     eval: (sh-set-shell "bash" t nil)
# End:
