# Makefile.in generated by automake 1.16.3 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2020 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@
VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
subdir = src/main/rust/bin
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \
	ctags-recursive dvi-recursive html-recursive info-recursive \
	install-data-recursive install-dvi-recursive \
	install-exec-recursive install-html-recursive \
	install-info-recursive install-pdf-recursive \
	install-ps-recursive install-recursive installcheck-recursive \
	installdirs-recursive pdf-recursive ps-recursive \
	tags-recursive uninstall-recursive
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
am__recursive_targets = \
  $(RECURSIVE_TARGETS) \
  $(RECURSIVE_CLEAN_TARGETS) \
  $(am__extra_recursive_targets)
AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \
	distdir distdir-am
am__extra_recursive_targets = cargo-build-recursive \
	cargo-devbuild-recursive cargo-check-recursive \
	cargo-test-recursive cargo-test-doc-recursive \
	cargo-clean-recursive
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
am__DIST_COMMON = $(srcdir)/Makefile.in
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
AWK_PROG = @AWK_PROG@
BASENAME_PROG = @BASENAME_PROG@
BASH_SH = @BASH_SH@
BC_PROG = @BC_PROG@
CARGO_PROG = @CARGO_PROG@
CARGO_PROG_VERSION = @CARGO_PROG_VERSION@
CAT = @CAT@
CHGRP = @CHGRP@
CHMOD_PROG = @CHMOD_PROG@
CHOWN = @CHOWN@
CP_PROG = @CP_PROG@
CURL_PROG = @CURL_PROG@
CYGPATH_W = @CYGPATH_W@
DATE_PROG = @DATE_PROG@
DEFS = @DEFS@
DIRNAME_PROG = @DIRNAME_PROG@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_PROG = @ECHO_PROG@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXPR_PROG = @EXPR_PROG@
FIND = @FIND@
GETCONF_PROG = @GETCONF_PROG@
GIT_HUB_PROG = @GIT_HUB_PROG@
GIT_PROG = @GIT_PROG@
GREP = @GREP@
HAVE_GETCONF_PROG = @HAVE_GETCONF_PROG@
HAVE_LSCPU_PROG = @HAVE_LSCPU_PROG@
HAVE_NPROC_PROG = @HAVE_NPROC_PROG@
HAVE_SYSCTL_PROG = @HAVE_SYSCTL_PROG@
HEAD_PROG = @HEAD_PROG@
ID_PROG = @ID_PROG@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
JQ_PROG = @JQ_PROG@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LN_S = @LN_S@
LSCPU_PROG = @LSCPU_PROG@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
MKDIR_PROG = @MKDIR_PROG@
MKTEMP_PROG = @MKTEMP_PROG@
MV_PROG = @MV_PROG@
NPROC_PROG = @NPROC_PROG@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
POD2MAN = @POD2MAN@
READLINK_PROG = @READLINK_PROG@
RM = @RM@
RMDIR = @RMDIR@
RUSTC_PROG = @RUSTC_PROG@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHA256SUM_PROG = @SHA256SUM_PROG@
SHA3SUM_PROG = @SHA3SUM_PROG@
SHELL = @SHELL@
SLEEP_PROG = @SLEEP_PROG@
STRIP = @STRIP@
SYSCTL_PROG = @SYSCTL_PROG@
TAIL_PROG = @TAIL_PROG@
TR_PROG = @TR_PROG@
VERSION = @VERSION@
WC_PROG = @WC_PROG@
XARGS_PROG = @XARGS_PROG@
ZSTD_PROG = @ZSTD_PROG@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ads_perl5_extra_includes = @ads_perl5_extra_includes@
ads_perl5_extra_includes_opt = @ads_perl5_extra_includes_opt@
adsgithubtools_perl5_inc_begin_block_snippet_filepath = @adsgithubtools_perl5_inc_begin_block_snippet_filepath@
am__leading_dot = @am__leading_dot@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
cargo_vendored_root = @cargo_vendored_root@
datadir = @datadir@
datarootdir = @datarootdir@
do_subst_command = @do_subst_command@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
perl5_pkgvdatadir = @perl5_pkgvdatadir@
perl5_pkgvlibdir = @perl5_pkgvlibdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
runstatedir = @runstatedir@
sbindir = @sbindir@
sed_slsanitize_command = @sed_slsanitize_command@
sed_srsanitize_command = @sed_srsanitize_command@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@

# Each subdir beneath here is a Rust "package". Each package contains one or
# more "binary" crates (executable programs).
#
SUBDIRS = parse-netrc \
          .

all: all-recursive

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/main/rust/bin/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/main/rust/bin/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

# This directory's subdirectories are mostly independent; you can cd
# into them and run 'make' without going through this Makefile.
# To change the values of 'make' variables: instead of editing Makefiles,
# (1) if the variable is set in 'config.status', edit 'config.status'
#     (which will cause the Makefiles to be regenerated when you run 'make');
# (2) otherwise, pass the desired values on the 'make' command line.
$(am__recursive_targets):
	@fail=; \
	if $(am__make_keepgoing); then \
	  failcom='fail=yes'; \
	else \
	  failcom='exit 1'; \
	fi; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"
cargo-build-local: 
cargo-devbuild-local: 
cargo-check-local: 
cargo-test-local: 
cargo-test-doc-local: 
cargo-clean-local: 

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-recursive
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-recursive

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-recursive

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    $(am__make_dryrun) \
	      || test -d "$(distdir)/$$subdir" \
	      || $(MKDIR_P) "$(distdir)/$$subdir" \
	      || exit 1; \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile
installdirs: installdirs-recursive
installdirs-am:
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
cargo-build: cargo-build-recursive

cargo-build-am: cargo-build-local

cargo-check: cargo-check-recursive

cargo-check-am: cargo-check-local

cargo-clean: cargo-clean-recursive

cargo-clean-am: cargo-clean-local

cargo-devbuild: cargo-devbuild-recursive

cargo-devbuild-am: cargo-devbuild-local

cargo-test: cargo-test-recursive

cargo-test-am: cargo-test-local

cargo-test-doc: cargo-test-doc-recursive

cargo-test-doc-am: cargo-test-doc-local

clean: clean-recursive

clean-am: clean-generic mostlyclean-am

distclean: distclean-recursive
	-rm -f Makefile
distclean-am: clean-am distclean-generic distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am:

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am:

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-generic

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am:

.MAKE: $(am__recursive_targets) install-am install-strip

.PHONY: $(am__recursive_targets) CTAGS GTAGS TAGS all all-am \
	cargo-build-am cargo-build-local cargo-check-am \
	cargo-check-local cargo-clean-am cargo-clean-local \
	cargo-devbuild-am cargo-devbuild-local cargo-test-am \
	cargo-test-doc-am cargo-test-doc-local cargo-test-local check \
	check-am clean clean-generic cscopelist-am ctags ctags-am \
	distclean distclean-generic distclean-tags distdir dvi dvi-am \
	html html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs installdirs-am maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic pdf \
	pdf-am ps ps-am tags tags-am uninstall uninstall-am

.PRECIOUS: Makefile


# Notes on the Rust build tooling and how we integrate it here.
#
# In the Rust ecosystem, code is organized as follows:
#
#     modules -- Organizational construct to hierarchically arrange code in
#                logical units.
#             -- Provide namespacing to control scope and visibility.
#             -- Several modules may exist within a single source file,
#                or be spread out across multiple files.
#             -- When spread across files, the module hierarchy is (at least
#                partially) reflected in the filesystem hierarchy.
#             -- Modules may contain other modules.
#
#     crate   -- An executable binary program, or a library.
#             -- The fundamental compilation unit in Rust.
#             -- A single crate is composed of modules.
#             -- A crate always has an implicit "root module", even if no
#                modules are explicitly declared. In an executable
#                (a.k.a. "binary crate"), this is the 'main.rs' file; in a
#                "library crate" this is the 'lib.rs' file.
#             -- All modules within a crate are compiled together as a unit;
#                individual modules ARE NOT compiled individually, even if
#                they exist in separate source files.
#
#     package -- One or more crates (that presumably provide a set of related
#                functionality).
#             -- Contains a 'Cargo.toml' file (a.k.a. the "manifest file")
#                that describes how the group of related crates are to be
#                built.
#             -- Are strict rules about what a package can contain:
#                    * A package must contain zero or one library crates
#                    * It may contain an arbitrary number of binary crates
#                    * A package must contain at least one crate, either
#                      binary or a library.
#             -- Cargo builds all crates within a given package.
#
# The cargo(1) tool is the standard dependency management and build
# orchestration tool that comes with Rust. We integrate it into our build as
# described below.
#
# Under its default mode of operation, Cargo would connect to network
# resources (crates.io; others, too, if so configured) to obtain dependencies
# and check for updates. (Yes, I'm glossing over a lot of details here.)
#
# We want our build to work without needing network access. Toward this end,
# the developer "vendors" the dependencies (both direct deps and transitive
# deps) in the source tree under:
#
#     ${top_srcdir}/src/third-party/cargo-vendored/
#
# There is a 'cargo-vendor-update' Makefile target defined in the top-level
# Makefile.am file that is aware of all the 'Cargo.toml' package files in the
# source tree.
#
# During development, the author can run that target after adding (in a
# 'Cargo.toml' file) new dependencies to a given Rust package, or after
# updating the version numbers for existing deps. The Makefile rule uses the
# cargo-vendor(1) subcommand to download any deps not already present in the
# vendored subdirectory. The pristine dependencies are checked into source
# control (git) along with the project sources, and are distributed in the
# source tarball artifacts of the current project.
#
# The end result is that an end user installing the package will need to have
# only the 'rustc' compiler installed and the 'cargo' build tool (which is
# shipped with rustc, so that should not be a problem). Everything else needed
# to build the Rust source code is contained in the source tarball.
#
# This practice of "vendoring" is an experiment here. We are intersted in
# avoiding network connectivity during normal builds. Having the third-party
# deps in-tree also helps ensure repeatable builds (using the exact same
# versions of the deps that were tested during development), and also acts as
# an insurance policy against any of the deps disappearing from the Internet
# (which happens).
#
# Cargo integration with GNU Autotools
# ------------------------------------
# The 'cargo' operations ('build', 'run', etc.) all pertain to a single Rust
# "package" (one or more related crates). The build definition for that
# package comes from a package-specific 'Cargo.toml' file. The 'Cargo.toml'
# file contains metadata about the package (name, version, various URLs, and
# dependencies).
#
# Cargo is also influenced by '.cargo/config.toml' files. Among other things,
# these files control the type and location of the artifact repositories that
# Cargo will attempt to contact to obtain dependency artifacts. Cargo will
# check for '.cargo/config.toml' files in the package-specific directory, all
# its parent directories, and a default location (~/.cargo/config.toml); it
# will merge these definitions together, with those files found "closer" to
# the package-specific directory having higher precedence.
#
# In the case of the current project, each Cargo package directory contains a
# relative .cargo/config.toml with commented out example settings. There is
# also a '.cargo/config.toml' file that exists relative to the project's
# ${top_srcdir}; that file contains the configuration that tells Cargo to use
# our vendored sources from the in-tree location rather than obtain them from
# the network.
#
# At configure time, we check for 'cargo' and 'rustc' dependencies, and
# generate the '.cargo/config.toml' files.
#
# At build time, the normal 'make all' build target invokes 'cargo' as needed
# to build all of the Rust "packages" in the tree.
#
# Our 'make install' target takes care of copying files into the correct
# locations. We do not use the Rust/Cargo-specific cargo-install(1), or
# similar; we treat those as developer-focused tools. Instead, we tell the
# autotools which files are which (programs, manpages, etc.) and have those
# installed in the normal way.
#
# Our 'make clean' target invokes 'cargo clean', etc.
#
# Once the project has been configured, developers are free to invoke the
# high-level operations through 'make' or invoke 'cargo' directly while
# working on a given package. Neither approach precludes the other; sometimes
# one or the other will be the more convenient interface, depending on the
# task at hand. Think of the GNU Autotools as higher-level project
# orchestration, and Cargo as one-specific build tool that participates in
# that orchestration.
#
# One thing to be aware of is that the make-based targets (with the single
# exception of the 'cargo-vendor-update' target mentioned above) all use Cargo
# command line flags to avoid accessing the network. We do that in preference
# to setting 'offline = true' in the top-level '.cargo/config.toml' file
# because it is intended as the main end-user experience. Developers working
# on the codebase, however, would likely be inconvenienced by such an
# option. The trade-off, of course, is that developers invoking 'cargo'
# directly will need to remember to provide the '--offline' option themselves,
# when needed.

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
