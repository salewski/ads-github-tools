# -*- org -*-

#+STARTUP: hidestars oddeven lognotedone lognoteredeadline lognoterepeat

#+PRIORITIES: 1 2 3 4 5

# Note that "RESCHEDULE" is something of a "meta todo"; it's used for todos
# that need to be rescheduled - a flag for additional planning work to be done
# on that particular todo. Typical flow: TODO ==> RESCHEDULE ==> TODO

#+TODO: TODO(t!) IN_PROGRESS(p!) DELEGATED(D@/!) WAITING(w@/!) HOLD(h@/!) REOPENED(r@/!) RESCHEDULE(R@/!) | DONE(d@/!)
#+TODO: | CANCELED(c@/!)
#+TODO: | SKIPPED(s@/!)

#+DRAWERS: LOGBOOK PROPERTIES MISCNOTES

#+TAGS: cache github doc build

#+CATEGORY: personal

* ads-github-cache design notes                                :cache:github:

** filesystem based

*** Similar in spirit to the .git/objects/ database

    The 'git' source code is much better structured than what I envision the
    first iteration or three of these tools being. For the moment, I'm really
    just looking for the scrappiest caching mechanism that can work in the
    common case, without worrying too much about corner cases or otherwise
    making it rock solid or perfect. Our strategy in the short term will be:
    if in doubt, invalidate the cache and pull the data from upstream.


*** Structure consistent with XDG Specification (maybe, or optional)

    I'm actually on the fence with this one, but other users would likely
    expect it. There's a tradeoff between having a single directory beneath
    which all program-suite-related config and cache info is written and
    splitting out the config information and cached data beneath two entirely
    different subdirectories.

    The first scheme might look something like this:

    :    ~/.ads-github-tools.d/
    :    ~/.ads-github-tools.d/etc/ads-github-tools.conf
    :    ~/.ads-github-tools.d/var/cache/github-v3-objects/

    The second (XDG-compliant) might look something like this:

    :    ~/.config/
    :    ~/.cache/

    For the XDG-related bits, we could use the [[id:75c73633-b997-4f5f-a057-f2440ed8b1ab][xdgdirs]] tool to obtain the XDG
    base directories (as opposed to having to manually implement the full spec
    ourselves).

**** XDG-related links

***** XDG-related links general

      https://wiki.debian.org/XDGBaseDirectorySpecification

***** XDG-related links tools/libraries

****** xdgdirs: command line tool; emits output for various langs (lisp, bash, json, others)
       :PROPERTIES:
       :ID:       75c73633-b997-4f5f-a057-f2440ed8b1ab
       :END:

       http://www.gnuvola.org/software/xdgdirs/
       http://www.gnuvola.org/software/xdgdirs/xdgdirs.html
       http://www.gnuvola.org/software/xdgdirs/xdgdirs.pdf


****** Racket

       https://docs.racket-lang.org/basedir/index.html

       https://github.com/willghatch/racket-basedir


****** Rust

       https://github.com/whitequark/rust-xdg



*** Structure if we ignore the XDG thing (for now)

    :     ~/.ads-github-tools.d/var/cache/github-v3-objects/xx/.....

    If the checksum names the directory, then the file objects inside it would
    be:

    :    .../url-normalized   (single-line file with normalized url as content)
    :    .../data-blob        (whatever was contained in the payload of the http response body)
    :    .../etag             (the Etag value (duh!))
    :
    :    .../http-response-headers (the raw response headers received when the date was obtained.
    :                               Probably only useful for debugging, but who knows...)


** issue #12: /user/repos lists more than just your forks and owned repos

    https://github.com/salewski/ads-github-tools/issues/12

*** Background [2016-07-05 Tue 22:50]

    I learned over the weekend that the data returned from =/user/repos/=
    includes not only the repositories for which the authenticated user is an
    owner and his personal forks of other repos, but also all
    organization-owned repos that the user has access to (regardless of
    whether or not he has a personal fork of them).

    This means that a fundamental assumption that the '*-fetch-all-upstreams'
    and '*-merge-all-upstreams' program was making about the repositories list
    obtained from that endpoint -- namely that it represented repos that the
    user either owned or had forked from others -- is incorrect. The data
    returned is (potentially) a superset of that data.

    Users who are not part of any organizations would not be affected, as the
    author was not prior to becoming a member of an organization and tripping
    over the bug. The behavior of the '*-fetch-all-upstreams' tool was to
    treat a personal fork of an organization repo as a non-fork, and to
    attempt to fetch the org repos that the user had available to him for
    forking, but for which he had no personal fork actually created.

    I'm experimenting with getting this buttoned up; just wanted to record
    information about the issue.


*** UPDATE ([2016-07-06 Wed 06:21]) just ignoring organization-owned repos (for now, anyway)

    Note that I have updated 'ads-github-fetch-all-upstreams' and
    'ads-github-merge-all-upstreams' to work only with repos with owner type
    'User' (we are ignoring those with owner type 'Organization').

    This works around the previously unrealized issue that the =/user/repos/=
    data can include repos that that user (as a member of a particular
    organization) merely has access to, regardless of whether he also has a
    personal fork of those repos.

    The authenticated user's personal fork of such a repo, if he has one, is
    presented separately (so the data we were originally after is still
    present).

    These changes have the undesirable effect of preventing those programs
    from working directly on organization-owned repos. I author need to
    further review how those are intended to work, but if this turns out to be
    an artificial limitation I'll be interested in having it fixed.


* TODO [#2] implement proper autotools-based build for ads-github-tools project ([[https://github.com/salewski/ads-github-tools/issues/5][issue #5]]) :build:
  :LOGBOOK:
  - CREATED [2016-05-15 Sun 12:16]
  :END:
  :PROPERTIES:
  :ID:       ecb0580f-246a-49cf-b29e-cba6313c16e5
  :END:


* documentation improvements                                            :doc:

** TODO [#3] introduce man pages
   :LOGBOOK:
   - CREATED [2016-05-15 Sun 12:17]
   :END:

   + Background

     Once we have [[id:ecb0580f-246a-49cf-b29e-cba6313c16e5][a proper build system]] in place, we should use it to generate
     project-specific man pages. I'm thinking that most of these will be in
     the form of POD embedded in the Perl and Bash program files.

     We should also provide a top-level =ads-github-tools(7)= into page that
     provides metadata about the project, overview of the tools, etc.


*** I don't love the cofiguration leakage

    While initially hacking together some useful tools, some of which have
    since been integrated into the 'ads-github-tools' project, it was useful
    to build on top of other existing tools. However, since we are interacting
    with the remote GitHub service, some of those other tools had different
    means of configuring their authentication mechanisms and the
    'ads-github-tools' inherited those mechanisms. Now that the tools have
    matured a bit, we might want to consider how we might want to avoid
    leaking those configuration details.

    Some of those mechanisms include:

    + .netrc  (for curl)
    + git-hub

    For the format of the '.netrc' file, see =netrc(5)=.

    For configuring the 'git-hub' tool, see the "CONFIGURATION" section in =git-hub(1)=.

    Note that cloning your forks via the 'git-hub' tool requires (at least)
    three forms of authentication be configured:

    1. Your .netrc config is required by the curl invocations that obtain the
       list of your repos (forks and non-forks). This is true even when a
       given repo is named on the command line of the ads-github-fetch-all-upstreams
       command, as it (among other things) verifies that the name specified
       matches the name of a repo associated with your GitHub account.

       Failure to have this configuration item will lead to an early failure
       at runtime when the tool receives a HTTP 401 ("Unauthorized") error
       when attempting to obtain the list of your repos.

    2. Your 'git-hub' configuration (in your ~/.gitconfig file). In the
       '[hub]' section, you should have values set for the config keys
       =username=, =oauthtoken=, and =baseurl=.

       Failure to have this configuration item set (or set properly) will
       result in the following error at runtime:

       #+BEGIN_SRC bash
       Error: Can't find 'hub.oauthtoken' config key in git config. Read the man page for details.
       ads-github-fetch-all-upstreams (error): was error while attempting to clone repo "foo-repo" from GitHub; bailing out
       #+END_SRC

       Note that the value of the =oauthtoken= matches the value of a
       "personal access token", which can be created in the GitHub website
       (when logged into your account) on the page:

       :    Settings -> Developer settings -> Personal access tokens


    3.


* TODO [#4] =ads-github-fetch-all-upstreams= maybe allow fetching of non-github-repo 'upstream' remotes, as well
  :LOGBOOK:
  - CREATED [2016-05-15 Sun 12:13]
  :END:
